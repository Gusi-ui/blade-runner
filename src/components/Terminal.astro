---
interface Props {
  title?: string;
}

// const { title = "BLADE RUNNER TERMINAL v1.0" } = Astro.props;
---

<div class="terminal-container">
  <div class="terminal-screen crt-flicker">
    <div class="terminal-header">
      <!-- ASCII Art Header -->
      <div class="ascii-header mb-4 text-center text-terminal-bright">
        <div class="ascii-title">
          <pre
            class="ascii-art glitch font-mono"
            data-text="╠═════════════════════════════════════════════════════════╣
║                                                         ║
║     ██████╗ ██╗   ██╗███████╗██╗    ██████╗ ███████╗██╗   ██╗ ║
║    ██╔════╝ ██║   ██║██╔════╝██║    ██╔══██╗██╔════╝██║   ██║ ║
║    ██║  ███╗██║   ██║███████╗██║    ██║  ██║█████╗  ██║   ██║ ║
║    ██║   ██║██║   ██║╚════██║██║    ██║  ██║██╔══╝  ╚██╗ ██╔╝ ║
║    ╚██████╔╝╚██████╔╝███████║██║ ██╗██████╔╝███████╗ ╚████╔╝  ║
║     ╚═════╝  ╚═════╝ ╚══════╝╚═╝ ╚═╝╚═════╝ ╚══════╝  ╚═══╝   ║
║                                                         ║
║               ╔═══════════════════════════╗             ║
║               ║   SISTEMA NEXUS-7        ║             ║
║               ╚═══════════════════════════╝             ║
║                                                         ║
╚═════════════════════════════════════════════════════════╝">
╠═════════════════════════════════════════════════════════╣
║                                                         ║
║     ██████╗ ██╗   ██╗███████╗██╗    ██████╗ ███████╗██╗   ██╗ ║
║    ██╔════╝ ██║   ██║██╔════╝██║    ██╔══██╗██╔════╝██║   ██║ ║
║    ██║  ███╗██║   ██║███████╗██║    ██║  ██║█████╗  ██║   ██║ ║
║    ██║   ██║██║   ██║╚════██║██║    ██║  ██║██╔══╝  ╚██╗ ██╔╝ ║
║    ╚██████╔╝╚██████╔╝███████║██║ ██╗██████╔╝███████╗ ╚████╔╝  ║
║     ╚═════╝  ╚═════╝ ╚══════╝╚═╝ ╚═╝╚═════╝ ╚══════╝  ╚═══╝   ║
║                                                         ║
║               ╔═══════════════════════════╗             ║
║               ║   SISTEMA NEXUS-7        ║             ║
║               ╚═══════════════════════════╝             ║
║                                                         ║
╚═════════════════════════════════════════════════════════╝
         </pre>
        </div>
      </div>

      <div
        class="flex flex-col items-start justify-between gap-2 text-xs text-terminal-dim sm:flex-row sm:items-center"
      >
        <span>CONECTADO: <span id="terminal-datetime"></span></span>
        <span>STATUS: <span class="text-green-400">ONLINE</span></span>
      </div>
    </div>

    <div id="terminal-content" class="min-h-[calc(100vh-200px)]">
      <div class="terminal-output" role="log" aria-live="polite" aria-label="Salida de la terminal">
        <p class="mb-2 text-terminal-bright">Inicializando sistema...</p>
        <p class="mb-2">Cargando módulos del kernel...</p>
        <p class="mb-2">Estableciendo conexión con MAINFRAME...</p>
        <p class="success-text mb-4">✓ Sistema listo</p>
        <p class="mb-2">Escribe 'ayuda' para ver comandos disponibles.</p>
        <p class="mb-4">Escribe 'menu' para acceder al menú principal.</p>
      </div>

      <div
        id="output-container"
        role="log"
        aria-live="polite"
        aria-label="Contenido dinámico de la terminal"
      >
      </div>

      <div class="terminal-input-line mt-4">
        <span class="terminal-prompt" aria-label="Prompt del sistema">gusi@nexus:~$</span>
        <input
          type="text"
          id="terminal-input"
          class="terminal-input"
          autocomplete="off"
          spellcheck="false"
          autofocus
          aria-label="Entrada de comandos de terminal"
          aria-describedby="terminal-help"
        />
        <span class="terminal-cursor" aria-hidden="true"></span>
      </div>
    </div>
  </div>

  <!-- Scanline effect -->
  <div class="scanline"></div>
</div>

<script>
  interface Command {
    execute: (args: string[]) => void;
  }

  class TerminalController {
    private input: HTMLInputElement;
    private outputContainer: HTMLElement;
    private cursor: HTMLElement;
    private commandHistory: string[] = [];
    private historyIndex: number = -1;
    private currentView: string = 'main';
    private keySound: HTMLAudioElement;

    constructor() {
      this.input = document.getElementById('terminal-input') as HTMLInputElement;
      this.outputContainer = document.getElementById('output-container') as HTMLElement;
      this.cursor = document.querySelector('.terminal-cursor') as HTMLElement;

      this.input.addEventListener('keydown', this.handleKeyDown.bind(this));
      this.input.addEventListener('input', () => this.updateCursorPosition());
      this.input.addEventListener('click', () => this.updateCursorPosition());
      this.input.addEventListener('focus', () => this.updateCursorPosition());

      // Auto-focus en input
      document.addEventListener('click', () => this.input.focus());

      // Inicializar posición del cursor después de que el DOM esté listo
      setTimeout(() => {
        this.updateCursorPosition();
      }, 100);

      // Actualizar posición del cursor periódicamente para asegurar correcta posición
      setInterval(() => {
        if (document.activeElement === this.input) {
          this.updateCursorPosition();
        }
      }, 100);
    }

    private updateCursorPosition(): void {
      if (!this.cursor || !this.input) return;

      const prompt = document.querySelector('.terminal-prompt') as HTMLElement;
      if (!prompt) return;

      // Crear un elemento temporal para medir el ancho del texto
      const span = document.createElement('span');
      span.style.visibility = 'hidden';
      span.style.position = 'absolute';
      span.style.whiteSpace = 'pre';
      span.style.font = window.getComputedStyle(this.input).font;
      span.textContent = this.input.value || '';
      document.body.appendChild(span);

      const textWidth = span.offsetWidth;
      document.body.removeChild(span);

      // Posicionar el cursor después del prompt y el texto
      const promptWidth = prompt.offsetWidth;
      const gapWidth = 8; // gap-2 = 0.5rem = 8px
      const cursorOffset = 3; // pequeño espacio para que esté justo al lado
      this.cursor.style.left = `${promptWidth + gapWidth + textWidth + cursorOffset}px`;
    }

    private handleKeyDown(e: KeyboardEvent): void {
      if (e.key === 'Enter') {
        e.preventDefault();
        const command = this.input.value.trim();
        if (command) {
          this.executeCommand(command);
          this.commandHistory.push(command);
          this.historyIndex = this.commandHistory.length;
          this.input.value = '';
        }
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        if (this.historyIndex > 0) {
          this.historyIndex--;
          this.input.value = this.commandHistory[this.historyIndex];
        }
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        if (this.historyIndex < this.commandHistory.length - 1) {
          this.historyIndex++;
          this.input.value = this.commandHistory[this.historyIndex];
        } else {
          this.historyIndex = this.commandHistory.length;
          this.input.value = '';
        }
      }
    }

    private executeCommand(command: string): void {
      this.printOutput(`<span class="text-terminal-bright">gusi@nexus:~$</span> ${command}`);

      const [cmd, ...args] = command.toLowerCase().split(' ');

      const commands: { [key: string]: Command } = {
        ayuda: {
          execute: () => this.showHelp(),
        },
        help: {
          execute: () => this.showHelp(),
        },
        menu: {
          execute: () => this.showMenu(),
        },
        limpiar: {
          execute: () => this.clear(),
        },
        clear: {
          execute: () => this.clear(),
        },
        fecha: {
          execute: () => this.printOutput(`Fecha actual: ${new Date().toLocaleString('es-ES')}`),
        },
        whoami: {
          execute: () => this.printOutput('gusi@nexus'),
        },
        '1': {
          execute: () => this.loadView('news'),
        },
        '2': {
          execute: () => this.loadView('cv'),
        },
        '3': {
          execute: () => this.loadView('projects'),
        },
        '4': {
          execute: () => this.loadView('games'),
        },
        '5': {
          execute: () => this.loadView('calculator'),
        },
        noticias: {
          execute: () => this.loadView('news'),
        },
        curriculum: {
          execute: () => this.loadView('cv'),
        },
        cv: {
          execute: () => this.loadView('cv'),
        },
        proyectos: {
          execute: () => this.loadView('projects'),
        },
        juegos: {
          execute: () => this.loadView('games'),
        },
        calculadora: {
          execute: () => this.loadView('calculator'),
        },
        pi: {
          execute: () => this.loadView('pi'),
        },
        salir: {
          execute: () => {
            this.printOutput('Cerrando sesión...');
            setTimeout(() => {
              this.clear();
              this.printOutput('Hasta luego, humano.');
              this.input.disabled = true;
            }, 1000);
          },
        },
        exit: {
          execute: () => commands['salir'].execute([]),
        },
        config: {
          execute: () => this.showConfig(),
        },
      };

      if (commands[cmd]) {
        commands[cmd].execute(args);
      } else if (cmd) {
        this.printOutput(
          `<span class="error-text">Error: Comando '${cmd}' no reconocido. Escribe 'ayuda' para ver comandos disponibles.</span>`
        );
      }

      this.scrollToBottom();
    }

    private showHelp(): void {
      const helpText = `
<div class="text-terminal-bright">COMANDOS DISPONIBLES:</div>
<div class="ml-4 mt-2">
  <div><span class="text-terminal-bright">ayuda/help</span> - Muestra esta ayuda</div>
  <div><span class="text-terminal-bright">menu</span> - Muestra el menú principal</div>
  <div><span class="text-terminal-bright">limpiar/clear</span> - Limpia la pantalla</div>
  <div><span class="text-terminal-bright">fecha</span> - Muestra la fecha actual</div>
  <div><span class="text-terminal-bright">noticias</span> - Noticias de tecnología</div>
  <div><span class="text-terminal-bright">curriculum/cv</span> - Currículum de Gusi</div>
  <div><span class="text-terminal-bright">proyectos</span> - Proyectos de Gusi</div>
  <div><span class="text-terminal-bright">juegos</span> - Juegos retro</div>
  <div><span class="text-terminal-bright">calculadora</span> - Calculadora cósmica</div>
  <div><span class="text-terminal-bright">pi</span> - Integración con Pi Network</div>
  <div><span class="text-terminal-bright">config</span> - Opciones de personalización</div>
  <div><span class="text-terminal-bright">salir/exit</span> - Salir del sistema</div>
</div>
      `;
      this.printOutput(helpText);
    }

    private showMenu(): void {
      const menuHtml = `
 <div class="section-title">
   Menú Principal - Nexus Terminal v1.0
 </div>
 <div id="menu-container"></div>
      `;
      this.printOutput(menuHtml);

      const event = new CustomEvent('loadMenu');
      document.dispatchEvent(event);
    }

    private showConfig(): void {
      const configHtml = `
 <div class="section-title">
   Configuración del Sistema
 </div>
 <div class="space-y-4">
   <div class="border-l-2 border-terminal-dim pl-4 py-2">
     <div class="text-terminal-bright">Opciones de Personalización</div>
     <div class="mt-2 space-y-2">
       <div class="menu-item" data-config="theme">Tema de Color</div>
       <div class="menu-item" data-config="effects">Efectos Visuales</div>
       <div class="menu-item" data-config="sound">Sonido de Teclas</div>
       <div class="menu-item" data-config="reset">Restaurar Predeterminados</div>
     </div>
   </div>
   <div class="text-sm text-terminal-dim">Selecciona una opción para personalizar.</div>
 </div>
      `;
      this.printOutput(configHtml);

      // Agregar event listeners para opciones de configuración
      setTimeout(() => {
        const configItems = document.querySelectorAll('[data-config]');
        configItems.forEach(item => {
          item.addEventListener('click', () => {
            const config = item.getAttribute('data-config');
            this.handleConfig(config);
          });
        });
      }, 100);
    }

    private handleConfig(config: string | null): void {
      switch (config) {
        case 'theme':
          this.printOutput(`
 <div class="border border-terminal-dim p-4 rounded">
   <div class="text-terminal-bright">Temas Disponibles:</div>
   <div class="mt-2 space-y-2">
     <div class="menu-item" data-theme="classic">Clásico (Verde Matrix)</div>
     <div class="menu-item" data-theme="cyberpunk">Cyberpunk (Azul Neón)</div>
     <div class="menu-item" data-theme="retro">Retro (Ámbar)</div>
   </div>
 </div>
          `);
          setTimeout(() => {
            const themeItems = document.querySelectorAll('[data-theme]');
            themeItems.forEach(item => {
              item.addEventListener('click', () => {
                const theme = item.getAttribute('data-theme');
                this.applyTheme(theme);
              });
            });
          }, 100);
          break;
        case 'effects':
          this.printOutput(`
 <div class="border border-terminal-dim p-4 rounded">
   <div class="text-terminal-bright">Efectos Visuales:</div>
   <div class="mt-2 space-y-2">
     <div class="menu-item" data-effect="glitch">Efectos Glitch: <span id="glitch-status">Activado</span></div>
     <div class="menu-item" data-effect="particles">Partículas: <span id="particles-status">Activado</span></div>
     <div class="menu-item" data-effect="scanlines">Líneas de Escaneo: <span id="scanlines-status">Activado</span></div>
   </div>
 </div>
          `);
          break;
        case 'sound':
          this.printOutput(`
 <div class="border border-terminal-dim p-4 rounded">
   <div class="text-terminal-bright">Configuración de Sonido:</div>
   <div class="mt-2">
     <div class="menu-item" data-sound="mechanical">Sonido Mecánico: <span id="sound-status">Activado</span></div>
     <div class="text-sm text-terminal-dim mt-2">Los sonidos se reproducen en navegadores compatibles.</div>
   </div>
 </div>
          `);
          break;
        case 'reset':
          this.printOutput(
            '<div class="success-text">Configuración restaurada a valores predeterminados.</div>'
          );
          this.applyTheme('classic');
          break;
      }
    }

    private applyTheme(theme: string | null): void {
      const body = document.body;
      body.classList.remove('theme-classic', 'theme-cyberpunk', 'theme-retro');

      switch (theme) {
        case 'cyberpunk':
          body.classList.add('theme-cyberpunk');
          this.printOutput('<div class="success-text">Tema Cyberpunk aplicado.</div>');
          break;
        case 'retro':
          body.classList.add('theme-retro');
          this.printOutput('<div class="success-text">Tema Retro aplicado.</div>');
          break;
        default:
          body.classList.add('theme-classic');
          this.printOutput('<div class="success-text">Tema Clásico aplicado.</div>');
      }
    }

    private loadView(view: string): void {
      this.currentView = view;
      const event = new CustomEvent('loadView', { detail: { view } });
      document.dispatchEvent(event);
    }

    private clear(): void {
      this.outputContainer.innerHTML = '';
    }

    printOutput(html: string): void {
      const div = document.createElement('div');
      div.className = 'terminal-output mb-2';
      div.innerHTML = html;
      this.outputContainer.appendChild(div);
    }

    private scrollToBottom(): void {
      const screen = document.querySelector('.terminal-screen');
      if (screen) {
        screen.scrollTop = screen.scrollHeight;
      }
    }
  }

  // Inicializar terminal
  const terminal = new TerminalController();

  // Exportar terminal globalmente para que otros componentes puedan usarlo
  window.terminal = terminal;

  // Actualizar fecha y hora en tiempo real
  function updateDateTime(): void {
    const datetimeEl = document.getElementById('terminal-datetime');
    if (datetimeEl) {
      const now = new Date();
      datetimeEl.textContent = now.toLocaleString('es-ES', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    }
  }

  // Actualizar inmediatamente y luego cada segundo
  updateDateTime();
  setInterval(updateDateTime, 1000);
</script>

<!-- Área de ayuda accesible -->
<div id="terminal-help" class="sr-only">
  Terminal interactiva estilo Blade Runner. Usa comandos como ayuda, menu, noticias, juegos, etc.
  Navegación: Usa las flechas arriba/abajo para historial, Enter para ejecutar comandos.
</div>

<style>
  /* Estilos adicionales específicos del componente */
</style>
