---
// Componente de noticias tecnol√≥gicas
---

<div id="news-component" class="hidden">
  <div class="section-title glitch" data-text="Noticias Tecnol√≥gicas - IA y Cosmos">
    Noticias Tecnol√≥gicas - IA y Cosmos
  </div>

  <div class="mb-4">
    <div class="mb-4 flex gap-2">
      <button id="filter-ai" class="menu-item px-3 py-1 text-xs">IA</button>
      <button id="filter-cosmos" class="menu-item px-3 py-1 text-xs">Cosmos</button>
      <button id="filter-all" class="menu-item px-3 py-1 text-xs">Todas</button>
      <button id="refresh-news" class="menu-item px-3 py-1 text-xs">Actualizar</button>
    </div>

    <div id="news-content" class="mb-4">
      <div class="loading-dots">Cargando noticias</div>
    </div>

    <div class="text-xs text-terminal-dim">
      <span id="last-update">√öltima actualizaci√≥n: Nunca</span> |
      <span id="news-count">0 noticias cargadas</span>
    </div>
  </div>

  <div class="mt-4 text-sm text-terminal-dim">Escribe 'menu' para volver al men√∫ principal.</div>
</div>

<script>
  interface NewsArticle {
    title: string;
    description: string;
    url: string;
    publishedAt: string;
    source: {
      name: string;
    };
  }

  declare global {
    interface Window {
      newsFeed: NewsFeed;
    }
  }

  class NewsFeed {
    private newsApiKey: string;
    private updateInterval: number = 300000; // 5 minutos para actualizaciones
    private intervalId?: number;
    public allNews: NewsArticle[] = [];
    private currentFilter: string = 'all';
    private demoNewsPool: NewsArticle[] = [];
    private guardianApiKey: string;
    private nasaApiKey: string;

    constructor() {
      // APIs p√∫blicas gratuitas
      this.newsApiKey = import.meta.env.PUBLIC_NEWS_API_KEY || '';
      this.guardianApiKey = import.meta.env.PUBLIC_GUARDIAN_API_KEY || 'test'; // Guardian permite 'test' como clave
      this.nasaApiKey = import.meta.env.PUBLIC_NASA_API_KEY || 'DEMO_KEY';

      // Inicializar pool de noticias demo
      this.initializeDemoNewsPool();
    }

    async fetchNews(): Promise<void> {
      const newsContent = document.getElementById('news-content');
      if (!newsContent) return;

      console.log('üîÑ Obteniendo noticias de m√∫ltiples fuentes...');

      try {
        // Obtener noticias de m√∫ltiples fuentes p√∫blicas y gratuitas
        const [guardianNews, nasaNews, arxivNews] = await Promise.allSettled([
          this.fetchFromGuardian(),
          this.fetchFromNASA(),
          this.fetchFromArXiv(),
        ]);

        const allNews: NewsArticle[] = [];

        // Procesar resultados de Guardian
        if (guardianNews.status === 'fulfilled' && guardianNews.value.length > 0) {
          console.log('‚úì The Guardian:', guardianNews.value.length, 'noticias');
          allNews.push(...guardianNews.value);
        }

        // Procesar resultados de NASA
        if (nasaNews.status === 'fulfilled' && nasaNews.value.length > 0) {
          console.log('‚úì NASA:', nasaNews.value.length, 'noticias');
          allNews.push(...nasaNews.value);
        }

        // Procesar resultados de arXiv
        if (arxivNews.status === 'fulfilled' && arxivNews.value.length > 0) {
          console.log('‚úì arXiv:', arxivNews.value.length, 'art√≠culos');
          allNews.push(...arxivNews.value);
        }

        // Eliminar duplicados basados en t√≠tulo
        const uniqueNews = allNews.filter(
          (article, index, self) => index === self.findIndex(a => a.title === article.title)
        );

        console.log('üì∞ Total de noticias √∫nicas:', uniqueNews.length);

        // Si no hay noticias reales, mostrar noticias demo
        if (uniqueNews.length === 0) {
          console.log('‚ö†Ô∏è No se pudieron obtener noticias reales, mostrando demo');
          this.showEnhancedDemoNews();
          return;
        }

        // Limitar a las primeras 15 noticias para traducir (optimizaci√≥n)
        const newsToTranslate = uniqueNews.slice(0, 15);

        // Traducir noticias al espa√±ol
        console.log('üåê Traduciendo', newsToTranslate.length, 'noticias al espa√±ol...');
        newsContent.innerHTML = '<div class="loading-dots">Traduciendo noticias al espa√±ol</div>';
        const translatedNews = await this.translateArticles(newsToTranslate);
        console.log('‚úì Noticias traducidas:', translatedNews.length);

        // Categorizar y mostrar noticias traducidas
        this.categorizeNewsDynamically(translatedNews);
        this.applyFilter();
        this.updateLastUpdateTime();
      } catch (error) {
        console.error('‚ùå Error al obtener noticias:', error);
        this.showEnhancedDemoNews();
      }
    }

    private applyFilter(): void {
      const newsContent = document.getElementById('news-content');
      const newsCount = document.getElementById('news-count');
      if (!newsContent || !newsCount) return;

      let filteredNews: NewsArticle[];

      if (this.currentFilter === 'ai') {
        // Filtrado amplio para IA y tecnolog√≠a
        filteredNews = this.allNews.filter(article => {
          const title = article.title.toLowerCase();
          const description = (article.description || '').toLowerCase();
          return (
            title.includes('ia') ||
            title.includes('artificial intelligence') ||
            title.includes('machine learning') ||
            title.includes('computer') ||
            title.includes('software') ||
            title.includes('programming') ||
            title.includes('tech') ||
            title.includes('technology') ||
            description.includes('ia') ||
            description.includes('artificial intelligence')
          );
        });
      } else if (this.currentFilter === 'cosmos') {
        // Filtrado amplio para espacio y ciencia
        filteredNews = this.allNews.filter(article => {
          const title = article.title.toLowerCase();
          const description = (article.description || '').toLowerCase();
          return (
            title.includes('space') ||
            title.includes('cosmos') ||
            title.includes('nasa') ||
            title.includes('astronomy') ||
            title.includes('galaxy') ||
            title.includes('star') ||
            title.includes('planet') ||
            title.includes('universe') ||
            title.includes('science') ||
            title.includes('research') ||
            description.includes('space') ||
            description.includes('nasa')
          );
        });
      } else {
        filteredNews = this.allNews;
      }

      console.log(`Filter applied: ${this.currentFilter}, results: ${filteredNews.length}`);

      if (filteredNews.length === 0) {
        // Si no hay noticias en la categor√≠a espec√≠fica, mostrar todas las noticias
        // con una nota indicando que se muestran todas debido al filtro
        newsContent.innerHTML = `
          <div class="border border-terminal-dim p-3 rounded mb-4">
            <div class="text-terminal-bright">üìã Categor√≠a: ${this.currentFilter === 'ai' ? 'IA y Tecnolog√≠a' : this.currentFilter === 'cosmos' ? 'Espacio y Ciencia' : 'Todas'}</div>
            <div class="text-sm text-terminal-dim mt-1">
              ${this.currentFilter !== 'all' ? 'No hay noticias espec√≠ficas en esta categor√≠a, mostrando noticias generales.' : ''}
            </div>
          </div>
          <div class="space-y-4">
            ${this.allNews
              .slice(0, 5)
              .map((article, index) => {
                const date = new Date(article.publishedAt).toLocaleDateString('es-ES');
                return `
                <div class="border-l-2 border-terminal-dim pl-4 py-2 hover:bg-terminal-dim hover:bg-opacity-10 transition-colors">
                  <div class="text-terminal-bright text-base font-semibold">${index + 1}. ${this.escapeHtml(article.title)}</div>
                  <div class="text-base mt-1">${this.escapeHtml(article.description || 'Sin descripci√≥n')}</div>
                  <div class="text-sm text-terminal-dim mt-2">
                    <span>${article.source.name}</span> |
                    <span>${date}</span> |
                    <a href="${article.url}" target="_blank" rel="noopener noreferrer"
                       class="text-terminal-text hover:text-terminal-bright underline">
                      Leer m√°s ‚Üí
                    </a>
                  </div>
                </div>
              `;
              })
              .join('')}
          </div>
        `;
      } else {
        let html = '<div class="space-y-4">';
        filteredNews.forEach((article, index) => {
          const date = new Date(article.publishedAt).toLocaleDateString('es-ES');
          html += `
            <div class="border-l-2 border-terminal-dim pl-4 py-2 hover:bg-terminal-dim hover:bg-opacity-10 transition-colors">
              <div class="text-terminal-bright text-base font-semibold">${index + 1}. ${this.escapeHtml(article.title)}</div>
              <div class="text-base mt-1">${this.escapeHtml(article.description || 'Sin descripci√≥n')}</div>
              <div class="text-sm text-terminal-dim mt-2">
                <span>${article.source.name}</span> |
                <span>${date}</span> |
                <a href="${article.url}" target="_blank" rel="noopener noreferrer"
                   class="text-terminal-text hover:text-terminal-bright underline">
                  Leer m√°s ‚Üí
                </a>
              </div>
            </div>
          `;
        });
        html += '</div>';
        newsContent.innerHTML = html;
      }

      newsCount.textContent = `${filteredNews.length} noticias cargadas`;
    }

    private updateLastUpdateTime(): void {
      const lastUpdate = document.getElementById('last-update');
      if (lastUpdate) {
        const now = new Date();
        lastUpdate.textContent = `√öltima actualizaci√≥n: ${now.toLocaleTimeString('es-ES')}`;
      }
    }

    private displayError(): void {
      const newsContent = document.getElementById('news-content');
      if (!newsContent) return;

      newsContent.innerHTML = `
        <div class="border border-yellow-700 bg-yellow-900 bg-opacity-20 p-4 rounded mb-4">
          <div class="text-yellow-200 font-semibold mb-2">‚ö†Ô∏è Error al cargar noticias</div>
          <div class="text-yellow-100 text-sm">
            No se pudieron obtener noticias de las fuentes en l√≠nea. Mostrando contenido de demostraci√≥n.
          </div>
        </div>
        <div class="mt-4 text-terminal-dim text-sm">
          <p class="mb-2">Fuentes intentadas:</p>
          <ul class="ml-4 list-disc space-y-1">
            <li>The Guardian API (tecnolog√≠a y ciencia)</li>
            <li>NASA APOD API (noticias espaciales)</li>
            <li>arXiv API (papers cient√≠ficos recientes)</li>
          </ul>
          <p class="mt-4 text-xs">Revisa la consola del navegador (F12) para m√°s detalles.</p>
        </div>
      `;
    }

    // The Guardian API - Noticias de tecnolog√≠a y ciencia
    private async fetchFromGuardian(): Promise<NewsArticle[]> {
      try {
        const topics = ['technology', 'science', 'artificial-intelligence-ai'];
        const allArticles: NewsArticle[] = [];

        for (const topic of topics) {
          const url = `https://content.guardianapis.com/search?section=${topic}&show-fields=headline,trailText,thumbnail&page-size=5&api-key=${this.guardianApiKey}`;

          const response = await fetch(url);
          if (!response.ok) continue;

          const data = await response.json();
          if (data.response && data.response.results) {
            const articles = data.response.results.map((item: any) => ({
              title: item.fields?.headline || item.webTitle,
              description: item.fields?.trailText || 'Art√≠culo de The Guardian sobre ' + topic,
              url: item.webUrl,
              publishedAt: item.webPublicationDate,
              source: { name: 'The Guardian' },
            }));
            allArticles.push(...articles);
          }
        }

        return allArticles.slice(0, 10);
      } catch (error) {
        console.warn('Error al obtener noticias de The Guardian:', error);
        return [];
      }
    }

    // NASA API - Noticias espaciales
    private async fetchFromNASA(): Promise<NewsArticle[]> {
      try {
        // NASA News RSS Feed via API
        const url = 'https://api.nasa.gov/planetary/apod?api_key=' + this.nasaApiKey + '&count=3';

        const response = await fetch(url);
        if (!response.ok) return [];

        const data = await response.json();

        return data.map((item: any) => ({
          title: item.title,
          description: item.explanation.substring(0, 250) + '...',
          url: item.url,
          publishedAt: item.date + 'T00:00:00Z',
          source: { name: 'NASA' },
        }));
      } catch (error) {
        console.warn('Error al obtener noticias de NASA:', error);
        return [];
      }
    }

    // arXiv API - Papers cient√≠ficos recientes
    private async fetchFromArXiv(): Promise<NewsArticle[]> {
      try {
        const topics = [
          'cat:cs.AI', // Inteligencia Artificial
          'cat:astro-ph', // Astrof√≠sica
          'cat:cs.LG', // Machine Learning
        ];

        const allPapers: NewsArticle[] = [];

        for (const topic of topics) {
          const url = `https://export.arxiv.org/api/query?search_query=${topic}&start=0&max_results=2&sortBy=submittedDate&sortOrder=descending`;

          const response = await fetch(url);
          if (!response.ok) continue;

          const text = await response.text();
          const parser = new DOMParser();
          const xml = parser.parseFromString(text, 'text/xml');

          const entries = xml.querySelectorAll('entry');
          entries.forEach(entry => {
            const title = entry.querySelector('title')?.textContent?.trim() || '';
            const summary = entry.querySelector('summary')?.textContent?.trim() || '';
            const link = entry.querySelector('id')?.textContent?.trim() || '';
            const published =
              entry.querySelector('published')?.textContent?.trim() || new Date().toISOString();

            if (title && summary) {
              allPapers.push({
                title: title,
                description: summary.substring(0, 250) + '...',
                url: link,
                publishedAt: published,
                source: { name: 'arXiv' },
              });
            }
          });
        }

        return allPapers.slice(0, 4);
      } catch (error) {
        console.warn('Error al obtener papers de arXiv:', error);
        return [];
      }
    }

    private initializeDemoNewsPool(): void {
      this.demoNewsPool = [
        // Noticias de IA y Tecnolog√≠a
        {
          title: 'ü§ñ GPT-5 promete avances revolucionarios en comprensi√≥n del lenguaje natural',
          description:
            'OpenAI anuncia la pr√≥xima generaci√≥n de modelos de lenguaje con capacidades sin precedentes en razonamiento y comprensi√≥n contextual.',
          url: 'https://openai.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'AI Weekly' },
        },
        {
          title: 'üß† Neuralink logra avance hist√≥rico en interfaces cerebro-computadora',
          description:
            'Primer paciente humano controla exitosamente el cursor de una computadora con el pensamiento, marcando una nueva era en neurotecnolog√≠a.',
          url: 'https://neuralink.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Future Tech' },
        },
        {
          title: 'üíª Computaci√≥n cu√°ntica alcanza viabilidad comercial',
          description:
            'IBM y Google anuncian procesadores cu√°nticos capaces de resolver problemas del mundo real m√°s r√°pido que las computadoras cl√°sicas.',
          url: 'https://quantum.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Quantum Today' },
        },
        {
          title: 'üîê Nuevo sistema de IA detecta amenazas cibern√©ticas en tiempo real',
          description:
            'Algoritmos de aprendizaje autom√°tico ahora predicen y previenen brechas de seguridad antes de que ocurran, revolucionando la ciberseguridad.',
          url: 'https://cybersec.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Security Now' },
        },
        {
          title: 'üéÆ Herramientas de desarrollo de juegos con IA transforman la industria',
          description:
            'Nuevas herramientas de IA generativa permiten a los desarrolladores crear mundos de juego complejos en horas en lugar de meses.',
          url: 'https://gamedev.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Game Developer' },
        },
        // Noticias de Espacio y Cosmos
        {
          title: 'üöÄ SpaceX lanza exitosamente primera misi√≥n tripulada a Marte',
          description:
            'Misi√≥n hist√≥rica marca el primer paso de la humanidad hacia convertirse en una especie multiplanetaria, con la tripulaci√≥n esperada en 7 meses.',
          url: 'https://spacex.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Space News' },
        },
        {
          title: 'üåå James Webb descubre exoplaneta potencialmente habitable',
          description:
            'El telescopio detecta biofirmas en la atm√≥sfera de un planeta a 120 a√±os luz de distancia, reavivando la b√∫squeda de vida extraterrestre.',
          url: 'https://nasa.gov',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'NASA News' },
        },
        {
          title: 'üõ∏ Avance revolucionario en teor√≠a de viaje m√°s r√°pido que la luz',
          description:
            'F√≠sicos proponen nuevo concepto de motor warp que podr√≠a hacer posible el viaje interestelar en nuestra vida.',
          url: 'https://physics.org',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Physics Today' },
        },
        {
          title: 'ü™ê Anillos de Saturno revelan secretos sobre formaci√≥n del sistema solar',
          description:
            'Nuevos datos de la misi√≥n Cassini proporcionan informaci√≥n sobre c√≥mo se formaron planetas y lunas hace miles de millones de a√±os.',
          url: 'https://jpl.nasa.gov',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'JPL News' },
        },
        {
          title: '‚òÑÔ∏è Empresa de miner√≠a de asteroides anuncia primera operaci√≥n comercial',
          description:
            'Compa√±√≠a privada planea extraer metales raros de asteroides cercanos a la Tierra, potencialmente valorados en billones de d√≥lares.',
          url: 'https://asteroidmining.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Mining Weekly' },
        },
        {
          title:
            'üî≠ Nuevo conjunto de telescopios detecta misteriosas se√±ales del espacio profundo',
          description:
            'Astr√≥nomos captan r√°fagas de radio repetitivas desde galaxia distante, despertando renovado inter√©s en programas SETI.',
          url: 'https://seti.org',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'SETI Institute' },
        },
        {
          title: 'üåç Planeta similar a la Tierra encontrado en sistema estelar cercano',
          description:
            'Proxima Centauri b muestra signos de agua l√≠quida y atm√≥sfera estable, convirti√©ndolo en objetivo principal para futura exploraci√≥n.',
          url: 'https://exoplanets.org',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Exoplanet News' },
        },
        // Noticias Mixtas de Tecnolog√≠a y Ciencia
        {
          title: '‚ö° Reactor de fusi√≥n logra ganancia neta de energ√≠a',
          description:
            'Cient√≠ficos producen m√°s energ√≠a de la consumida por primera vez, acercando la energ√≠a limpia e ilimitada a la realidad.',
          url: 'https://iter.org',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Energy Today' },
        },
        {
          title: 'üß¨ Avance de CRISPR permite prevenci√≥n de enfermedades antes del nacimiento',
          description:
            'Tecnolog√≠a de edici√≥n gen√©tica elimina exitosamente enfermedades hereditarias en embriones humanos con 100% de precisi√≥n.',
          url: 'https://crispr.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'BioTech News' },
        },
        {
          title: 'üåê Cobertura global de internet alcanza 100% con red de sat√©lites',
          description:
            '√öltimas regiones de la Tierra obtienen acceso a internet de alta velocidad, transformando educaci√≥n y comercio mundial.',
          url: 'https://starlink.com',
          publishedAt: new Date(Date.now() - Math.random() * 86400000).toISOString(),
          source: { name: 'Tech Global' },
        },
      ];
    }

    private getRandomDemoArticles(count: number = 5): NewsArticle[] {
      // Crear una copia del pool y mezclarla
      const shuffled = [...this.demoNewsPool].sort(() => Math.random() - 0.5);

      // Actualizar las fechas para que parezcan recientes
      return shuffled.slice(0, count).map(article => ({
        ...article,
        publishedAt: new Date(Date.now() - Math.random() * 3600000 * 24).toISOString(), // √öltimas 24 horas
      }));
    }

    private getDemoNews(): string {
      const demoArticles = [
        {
          title: 'Nuevos avances en inteligencia artificial generativa',
          description: 'Investigadores presentan mejoras significativas en modelos de lenguaje.',
          source: 'Tech News',
          date: new Date().toLocaleDateString('es-ES'),
        },
        {
          title: 'NASA descubre exoplaneta potencialmente habitable',
          description:
            'El telescopio James Webb identifica signos de agua en atm√≥sfera planetaria.',
          source: 'Space Daily',
          date: new Date().toLocaleDateString('es-ES'),
        },
        {
          title: 'IA ayuda en descubrimientos astron√≥micos',
          description:
            'Algoritmos de machine learning identifican nuevos patrones en datos espaciales.',
          source: 'Science Today',
          date: new Date().toLocaleDateString('es-ES'),
        },
      ];

      return demoArticles
        .map(
          (article, index) => `
        <div class="border-l-2 border-terminal-dim pl-4 py-2 mt-2">
          <div class="text-terminal-bright">${index + 1}. ${article.title}</div>
          <div class="text-sm mt-1">${article.description}</div>
          <div class="text-xs text-terminal-dim mt-2">
            <span>${article.source}</span> | <span>${article.date}</span>
          </div>
        </div>
      `
        )
        .join('');
    }

    private escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    private categorizeNewsDynamically(news: NewsArticle[]): void {
      // Categorizar noticias din√°micamente basado en palabras clave
      const aiKeywords = [
        'ia',
        'artificial intelligence',
        'machine learning',
        'deep learning',
        'neural network',
        'computer',
        'software',
        'programming',
        'tech',
        'technology',
      ];
      const spaceKeywords = [
        'space',
        'nasa',
        'astronomy',
        'cosmos',
        'galaxy',
        'star',
        'planet',
        'universe',
        'telescope',
        'satellite',
        'rocket',
        'science',
        'research',
      ];

      const aiNews = news.filter(article =>
        aiKeywords.some(
          keyword =>
            article.title.toLowerCase().includes(keyword) ||
            article.description.toLowerCase().includes(keyword)
        )
      );

      const spaceNewsFiltered = news.filter(article =>
        spaceKeywords.some(
          keyword =>
            article.title.toLowerCase().includes(keyword) ||
            article.description.toLowerCase().includes(keyword)
        )
      );

      console.log(
        'Dynamic categorization - AI:',
        aiNews.length,
        'Space:',
        spaceNewsFiltered.length
      );

      // Usar las noticias categorizadas
      this.allNews = news.slice(0, 10); // Tomar las 10 m√°s recientes
      this.applyFilter();
      this.updateLastUpdateTime();
    }

    private showEnhancedDemoNews(): void {
      const newsContent = document.getElementById('news-content');
      const newsCount = document.getElementById('news-count');

      if (!newsContent || !newsCount) return;

      const demoArticles = [
        {
          title: 'üöÄ NASA anuncia nuevo telescopio espacial James Webb',
          description:
            'El telescopio m√°s avanzado de la humanidad revela im√°genes in√©ditas del universo profundo, mostrando galaxias formadas poco despu√©s del Big Bang.',
          source: 'NASA News',
          publishedAt: new Date().toISOString(),
        },
        {
          title: 'ü§ñ Inteligencia Artificial revoluciona la medicina',
          description:
            'Nuevos algoritmos de IA pueden diagnosticar enfermedades con mayor precisi√≥n que los m√©dicos humanos, abriendo nuevas posibilidades en el tratamiento temprano.',
          source: 'Tech Today',
          publishedAt: new Date().toISOString(),
        },
        {
          title: 'üåå Descubren planeta similar a la Tierra en zona habitable',
          description:
            'Astr√≥nomos encuentran un exoplaneta con condiciones similares a nuestro planeta, relanzando la b√∫squeda de vida extraterrestre.',
          source: 'Space Daily',
          publishedAt: new Date().toISOString(),
        },
        {
          title: 'üí° Avances en energ√≠a nuclear para viajes espaciales',
          description:
            'Cient√≠ficos desarrollan nuevos sistemas de propulsi√≥n que podr√≠an llevar humanos a Marte en tiempo r√©cord.',
          source: 'Science Magazine',
          publishedAt: new Date().toISOString(),
        },
        {
          title: 'üß† Neuralink comienza pruebas cl√≠nicas en humanos',
          description:
            'La interfaz cerebro-computadora de Elon Musk muestra resultados prometedores en pacientes con par√°lisis.',
          source: 'Future Tech',
          publishedAt: new Date().toISOString(),
        },
      ];

      let html = `
        <div class="border border-terminal-bright p-4 rounded mb-4">
          <div class="text-terminal-bright text-lg mb-2">üì∞ NOTICIAS DE DEMOSTRACI√ìN</div>
          <div class="text-sm text-terminal-dim mb-4">
            Mientras se resuelve el problema con la API de noticias, aqu√≠ tienes algunas noticias de ejemplo sobre tecnolog√≠a y espacio.
          </div>
        </div>
        <div class="space-y-4">
      `;

      demoArticles.forEach((article, index) => {
        const date = new Date(article.publishedAt).toLocaleDateString('es-ES');
        html += `
          <div class="border-l-2 border-terminal-dim pl-4 py-2 hover:bg-terminal-dim hover:bg-opacity-10 transition-colors">
            <div class="text-terminal-bright">${index + 1}. ${this.escapeHtml(article.title)}</div>
            <div class="text-sm mt-1">${this.escapeHtml(article.description)}</div>
            <div class="text-xs text-terminal-dim mt-2">
              <span>${article.source}</span> |
              <span>${date}</span> |
              <span class="text-terminal-bright">[DEMO]</span>
            </div>
          </div>
        `;
      });

      html += '</div>';
      newsContent.innerHTML = html;
      newsCount.textContent = `${demoArticles.length} noticias de demostraci√≥n`;

      this.updateLastUpdateTime();
    }

    startAutoUpdate(): void {
      // Cargar noticias inmediatamente
      this.fetchNews();

      // Configurar actualizaci√≥n autom√°tica cada 5 minutos
      this.intervalId = window.setInterval(() => {
        this.fetchNews();
      }, this.updateInterval);
    }

    stopAutoUpdate(): void {
      if (this.intervalId) {
        clearInterval(this.intervalId);
      }
    }

    setFilter(filter: string): void {
      this.currentFilter = filter;
      this.applyFilter();
    }

    refreshNews(): void {
      this.fetchNews();
    }

    // M√©todos de traducci√≥n
    private async translateToSpanish(text: string): Promise<string> {
      try {
        const chunks = this.splitTextIntoChunks(text, 4500);
        const translatedChunks: string[] = [];

        for (const chunk of chunks) {
          const translated = await this.translateSinglePart(chunk);
          translatedChunks.push(translated);
          if (chunks.length > 1) {
            await new Promise(resolve => setTimeout(resolve, 500));
          }
        }

        return translatedChunks.join(' ');
      } catch (error) {
        console.warn('Translation failed, using original text:', error);
        return text;
      }
    }

    private splitTextIntoChunks(text: string, maxLength: number): string[] {
      if (text.length <= maxLength) {
        return [text];
      }

      const chunks: string[] = [];
      const sentences = text.match(/[^.!?]+[.!?]+/g) || [text];
      let currentChunk = '';

      for (const sentence of sentences) {
        if ((currentChunk + sentence).length > maxLength && currentChunk.length > 0) {
          chunks.push(currentChunk.trim());
          currentChunk = sentence;
        } else {
          currentChunk += sentence;
        }
      }

      if (currentChunk.length > 0) {
        chunks.push(currentChunk.trim());
      }

      return chunks;
    }

    private async translateSinglePart(text: string): Promise<string> {
      const maxRetries = 3;

      for (let attempt = 0; attempt < maxRetries; attempt++) {
        try {
          // M√©todo 1: Usar translate.googleapis.com sin autenticaci√≥n
          const googleResponse = await fetch(
            `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=es&dt=t&q=${encodeURIComponent(text)}`
          );

          if (googleResponse.ok) {
            const data = await googleResponse.json();
            if (data && data[0] && Array.isArray(data[0])) {
              const translatedText = data[0]
                .map((item: unknown[]) => (item as string[])[0])
                .join('');
              if (translatedText && translatedText.trim()) {
                return translatedText;
              }
            }
          }

          // M√©todo 2: Fallback a LibreTranslate
          const libreResponse = await fetch('https://libretranslate.com/translate', {
            method: 'POST',
            body: JSON.stringify({
              q: text,
              source: 'en',
              target: 'es',
              format: 'text',
            }),
            headers: { 'Content-Type': 'application/json' },
          });

          if (libreResponse.ok) {
            const data = await libreResponse.json();
            if (data.translatedText) {
              return data.translatedText;
            }
          }

          // M√©todo 3: Fallback a MyMemory
          const myMemoryResponse = await fetch(
            `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|es`
          );

          if (myMemoryResponse.ok) {
            const data = await myMemoryResponse.json();
            if (data.responseStatus === 200 && data.responseData?.translatedText) {
              return data.responseData.translatedText;
            }
          }

          if (attempt < maxRetries - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
          }
        } catch (error) {
          console.warn(`Intento ${attempt + 1} de traducci√≥n fall√≥:`, error);
          if (attempt < maxRetries - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
          }
        }
      }

      console.warn('Todos los m√©todos de traducci√≥n fallaron, usando texto original');
      return text;
    }

    // Traducir art√≠culos de noticias
    private async translateArticles(articles: NewsArticle[]): Promise<NewsArticle[]> {
      const translatedArticles: NewsArticle[] = [];

      for (const article of articles) {
        try {
          // Traducir t√≠tulo y descripci√≥n
          const translatedTitle = await this.translateToSpanish(article.title);
          const translatedDescription = await this.translateToSpanish(article.description);

          translatedArticles.push({
            ...article,
            title: translatedTitle,
            description: translatedDescription,
          });

          // Peque√±a pausa entre traducciones para evitar rate limiting
          if (articles.length > 1) {
            await new Promise(resolve => setTimeout(resolve, 300));
          }
        } catch (error) {
          console.warn('Error traduciendo art√≠culo, usando original:', error);
          translatedArticles.push(article);
        }
      }

      return translatedArticles;
    }
  }

  // Inicializar NewsFeed
  const newsFeed = new NewsFeed();

  // Exponer el newsFeed globalmente para debugging
  window.newsFeed = newsFeed;

  document.addEventListener('loadView', (e: Event) => {
    const customEvent = e as CustomEvent;
    if (customEvent.detail.view === 'news') {
      const terminal = window.terminal;
      const newsComponent = document.getElementById('news-component');

      if (terminal && newsComponent) {
        // Detener actualizaciones anteriores
        newsFeed.stopAutoUpdate();

        // Limpiar noticias anteriores para forzar recarga
        newsFeed.allNews = [];

        terminal.printOutput(newsComponent.innerHTML);

        // Iniciar actualizaciones con carga inmediata
        newsFeed.startAutoUpdate();

        // Agregar event listeners para filtros y actualizaci√≥n
        setTimeout(() => {
          const filterAiBtn = document.getElementById('filter-ai');
          const filterCosmosBtn = document.getElementById('filter-cosmos');
          const filterAllBtn = document.getElementById('filter-all');
          const refreshBtn = document.getElementById('refresh-news');

          if (filterAiBtn) {
            filterAiBtn.addEventListener('click', () => newsFeed.setFilter('ai'));
          }
          if (filterCosmosBtn) {
            filterCosmosBtn.addEventListener('click', () => newsFeed.setFilter('cosmos'));
          }
          if (filterAllBtn) {
            filterAllBtn.addEventListener('click', () => newsFeed.setFilter('all'));
          }
          if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
              // Limpiar cache y recargar
              newsFeed.allNews = [];
              newsFeed.refreshNews();
            });
          }
        }, 100);
      }
    } else {
      newsFeed.stopAutoUpdate();
    }
  });
</script>

<style>
  /* Estilos adicionales si es necesario */
</style>
