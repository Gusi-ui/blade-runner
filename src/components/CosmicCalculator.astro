---
// Componente Calculadora C√≥smica
---

<div id="calculator-component" class="hidden">
  <div class="section-title">Calculadora C√≥smica</div>

  <div class="mb-6">
    <div class="mb-4 text-terminal-text">
      Descubre tu edad en diferentes planetas y obt√©n datos astron√≥micos de tu fecha de nacimiento.
    </div>

    <div class="mb-6 space-y-4">
      <div>
        <label for="birthdate" class="mb-2 block text-base text-terminal-bright">
          Ingresa tu fecha de nacimiento:
        </label>
        <input
          type="date"
          id="birthdate"
          class="terminal-input w-full rounded border-2 border-terminal-bright bg-black px-4 py-3 text-lg text-terminal-text md:w-auto"
          style="color-scheme: dark;"
          max={new Date().toISOString().split('T')[0]}
        />
      </div>

      <div class="flex gap-2">
        <button id="calculator-submit" class="menu-item px-4 py-2"> Calcular </button>
        <button id="calculator-exit" class="menu-item px-4 py-2"> Volver al men√∫ </button>
      </div>
    </div>

    <div id="calculator-results" class="hidden">
      <!-- Resultados se mostrar√°n aqu√≠ -->
    </div>

    <div id="nasa-data" class="mt-6 hidden">
      <!-- Datos de NASA se mostrar√°n aqu√≠ -->
    </div>
  </div>
</div>

<script>
  import type { TerminalController } from '../types/terminal';

  interface PlanetaryAge {
    planet: string;
    age: number;
    orbitalPeriod: number;
  }

  interface NASAAPODResponse {
    title: string;
    explanation: string;
    url: string;
    date: string;
    media_type: string;
  }

  interface TechNewsEvent {
    title: string;
    description: string;
    source: string;
    url?: string;
    publishedAt?: string;
  }

  class CosmicCalculator {
    private terminal: TerminalController;
    private nasaApiKey: string;

    // Periodos orbitales en d√≠as terrestres
    private planets = {
      Mercurio: 87.97,
      Venus: 224.7,
      Tierra: 365.26,
      Marte: 686.98,
      J√∫piter: 4332.59,
      Saturno: 10759.22,
      Urano: 30688.5,
      Neptuno: 60182,
    };

    constructor(terminal: TerminalController) {
      this.terminal = terminal;
      this.nasaApiKey = import.meta.env.PUBLIC_NASA_API_KEY || 'DEMO_KEY';
    }

    init(): void {
      const submitBtn = document.getElementById('calculator-submit');
      const exitBtn = document.getElementById('calculator-exit');

      if (submitBtn) {
        submitBtn.addEventListener('click', () => this.calculate());
      }

      if (exitBtn) {
        exitBtn.addEventListener('click', () => this.exit());
      }

      const birthdateInput = document.getElementById('birthdate') as HTMLInputElement;
      if (birthdateInput) {
        birthdateInput.addEventListener('keydown', e => {
          if (e.key === 'Enter') {
            this.calculate();
          }
        });
      }
    }

    private calculate(): void {
      const birthdateInput = document.getElementById('birthdate') as HTMLInputElement;
      const resultsDiv = document.getElementById('calculator-results');
      const nasaDataDiv = document.getElementById('nasa-data');

      if (!birthdateInput || !resultsDiv || !nasaDataDiv) return;

      const birthdate = birthdateInput.value;

      if (!birthdate) {
        alert('Por favor ingresa una fecha de nacimiento v√°lida.');
        return;
      }

      const birthDate = new Date(birthdate);
      const today = new Date();

      if (birthDate > today) {
        alert('La fecha de nacimiento no puede ser en el futuro.');
        return;
      }

      // Limpiar resultados anteriores completamente
      resultsDiv.innerHTML = '';
      nasaDataDiv.innerHTML = '';

      // Calcular edades planetarias
      const daysPassed = Math.floor(
        (today.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24)
      );
      const ages: PlanetaryAge[] = [];

      for (const [planet, orbitalPeriod] of Object.entries(this.planets)) {
        const age = daysPassed / orbitalPeriod;
        ages.push({ planet, age, orbitalPeriod });
      }

      // Mostrar resultados
      this.displayResults(ages, birthDate, daysPassed);

      // Generar noticias del a√±o de nacimiento (debe ejecutarse despu√©s de displayResults)
      this.generateBirthYearNews(birthDate);

      // Obtener datos de NASA
      this.fetchNASAData(birthdate);
    }

    private displayResults(ages: PlanetaryAge[], birthDate: Date, daysPassed: number): void {
      const resultsDiv = document.getElementById('calculator-results');
      if (!resultsDiv) return;

      resultsDiv.classList.remove('hidden');

      // Calcular edad en formato humano
      const humanAge = this.calculateHumanAge(birthDate);

      let html = `
        <div class="border border-terminal-dim p-4 rounded">
          <div class="text-terminal-bright text-xl mb-4">
            ‚ñà TU EDAD EN EL SISTEMA SOLAR
          </div>

          <div class="mb-4 text-base">
            <div>Fecha de nacimiento: <span class="text-terminal-bright">${birthDate.toLocaleDateString('es-ES')}</span></div>
            <div class="text-terminal-bright text-lg">Edad terrestre: ${humanAge}</div>
            <div>D√≠as vividos: <span class="text-terminal-bright">${daysPassed.toLocaleString('es-ES')}</span></div>
            <div>Horas vividas: <span class="text-terminal-bright">${(daysPassed * 24).toLocaleString('es-ES')}</span></div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      `;

      ages.forEach(({ planet, age, orbitalPeriod }) => {
        const humanPlanetAge = this.calculateHumanAgeFromDecimal(age);
        html += `
          <div class="border-l-2 border-terminal-dim pl-3 py-2">
            <div class="text-terminal-text font-bold text-base">${planet}</div>
            <div class="text-lg text-terminal-bright font-semibold">${humanPlanetAge}</div>
            <div class="text-sm text-terminal-dim">a√±os ${planet.toLowerCase()}ianos</div>
            <div class="text-sm text-terminal-dim mt-1">
              1 a√±o = ${orbitalPeriod.toFixed(0)} d√≠as terrestres
            </div>
          </div>
        `;
      });

      html += `
          </div>
        </div>
      `;

      resultsDiv.innerHTML = html;
    }

    private calculateHumanAge(birthDate: Date): string {
      const today = new Date();
      let years = today.getFullYear() - birthDate.getFullYear();
      let months = today.getMonth() - birthDate.getMonth();
      let days = today.getDate() - birthDate.getDate();

      if (days < 0) {
        months--;
        days += new Date(today.getFullYear(), today.getMonth(), 0).getDate();
      }

      if (months < 0) {
        years--;
        months += 12;
      }

      const parts = [];
      if (years > 0) parts.push(`${years} a√±o${years !== 1 ? 's' : ''}`);
      if (months > 0) parts.push(`${months} mes${months !== 1 ? 'es' : ''}`);
      if (days > 0) parts.push(`${days} d√≠a${days !== 1 ? 's' : ''}`);

      return parts.join(', ') || 'Menos de un d√≠a';
    }

    private calculateHumanAgeFromDecimal(decimalAge: number): string {
      const years = Math.floor(decimalAge);
      const remainingDays = (decimalAge - years) * 365.25;
      const months = Math.floor(remainingDays / 30.44);
      const days = Math.floor(remainingDays % 30.44);

      const parts = [];
      if (years > 0) parts.push(`${years} a√±o${years !== 1 ? 's' : ''}`);
      if (months > 0) parts.push(`${months} mes${months !== 1 ? 'es' : ''}`);
      if (days > 0) parts.push(`${days} d√≠a${days !== 1 ? 's' : ''}`);

      return parts.join(', ') || 'Menos de un d√≠a';
    }

    private async fetchNASAData(birthdate: string): Promise<void> {
      const nasaDataDiv = document.getElementById('nasa-data');
      if (!nasaDataDiv) return;

      nasaDataDiv.classList.remove('hidden');
      nasaDataDiv.innerHTML = '<div class="loading-dots">Cargando datos astron√≥micos</div>';

      // APOD solo existe desde junio 16, 1995
      const birthDate = new Date(birthdate);
      const apodStartDate = new Date('1995-06-16');

      // Si la fecha es anterior a APOD o la clave es demo/inv√°lida, usar contenido alternativo
      if (
        birthDate < apodStartDate ||
        this.nasaApiKey === 'DEMO_KEY' ||
        !this.nasaApiKey ||
        this.nasaApiKey.length < 20
      ) {
        console.log(
          'üìÖ Fecha anterior a junio 1995 o API key no v√°lida - mostrando datos astron√≥micos calculados'
        );
        this.displayAlternativeAstronomyData(birthdate);
        return;
      }

      try {
        // Verificar si la fecha es futura comparada con la √∫ltima fecha disponible en APOD
        const latestAPODDate = await this.getLatestAPODDate();

        if (birthDate > latestAPODDate) {
          console.log('üìÖ Fecha de nacimiento posterior a la √∫ltima imagen APOD disponible');
          this.displayAlternativeAstronomyData(birthdate);
          return;
        }

        // Fetch APOD (Astronomy Picture of the Day) para la fecha de nacimiento
        console.log('‚úì Cargando imagen APOD para fecha:', birthdate);
        const apodResponse = await fetch(
          `https://api.nasa.gov/planetary/apod?api_key=${this.nasaApiKey}&date=${birthdate}`
        );

        if (apodResponse.ok) {
          const apodData: NASAAPODResponse = await apodResponse.json();
          this.displayNASAData(apodData);
        } else {
          // Si falla la API, mostrar contenido astron√≥mico alternativo
          console.log('‚ö†Ô∏è Error en API de NASA, usando contenido alternativo');
          this.displayAlternativeAstronomyData(birthdate);
        }
      } catch (error) {
        // Mostrar contenido alternativo en lugar de error
        console.log('‚ö†Ô∏è Error al cargar APOD, usando contenido alternativo:', error);
        this.displayAlternativeAstronomyData(birthdate);
      }
    }

    private async getLatestAPODDate(): Promise<Date> {
      try {
        // Llamar a la API sin par√°metro de fecha para obtener la imagen m√°s reciente
        const response = await fetch(
          `https://api.nasa.gov/planetary/apod?api_key=${this.nasaApiKey}`
        );

        if (response.ok) {
          const data: NASAAPODResponse = await response.json();
          console.log('‚úì √öltima fecha APOD disponible:', data.date);
          return new Date(data.date);
        }
      } catch (error) {
        console.warn('No se pudo obtener la fecha m√°s reciente de APOD');
      }

      // Fallback: usar la fecha actual
      return new Date();
    }

    private displayAlternativeAstronomyData(birthdate: string): void {
      const nasaDataDiv = document.getElementById('nasa-data');
      if (!nasaDataDiv) return;

      const date = new Date(birthdate);
      const year = date.getFullYear();
      const month = date.getMonth();
      const day = date.getDate();

      // Calcular datos astron√≥micos interesantes
      const daysAlive = Math.floor((new Date().getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
      const moonPhases = [
        'üåë Luna Nueva',
        'üåí Luna Creciente',
        'üåì Cuarto Creciente',
        'üåî Luna Gibosa Creciente',
        'üåï Luna Llena',
        'üåñ Luna Gibosa Menguante',
        'üåó Cuarto Menguante',
        'üåò Luna Menguante',
      ];
      const moonPhase = moonPhases[Math.floor((((year + month + day) % 29.53) / 29.53) * 8) % 8];

      // Calcular signo zodiacal
      const zodiacSign = this.getZodiacSign(month, day);

      // Datos del cielo en esa fecha
      const skyData = this.getSkyDataForDate(month, day);

      const html = `
        <div class="border border-terminal-dim p-4 rounded">
          <div class="text-terminal-bright text-xl mb-4">
            ‚ñà DATOS ASTRON√ìMICOS DE TU NACIMIENTO
          </div>

          <div class="mb-4 p-3 bg-yellow-900 bg-opacity-30 rounded border border-yellow-700">
            <div class="text-yellow-200 font-semibold mb-2 text-base">‚ÑπÔ∏è Imagen no disponible</div>
            <div class="text-base text-yellow-100">
              Las im√°genes de NASA APOD solo est√°n disponibles desde el 16 de junio de 1995.
              En su lugar, te mostramos datos astron√≥micos calculados y una visualizaci√≥n del Sistema Solar.
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div class="border-l-2 border-terminal-dim pl-3">
              <div class="text-terminal-bright font-semibold text-base">Fase Lunar Aproximada</div>
              <div class="text-lg">${moonPhase}</div>
            </div>

            <div class="border-l-2 border-terminal-dim pl-3">
              <div class="text-terminal-bright font-semibold text-base">Signo Zodiacal</div>
              <div class="text-lg">${zodiacSign}</div>
            </div>

            <div class="border-l-2 border-terminal-dim pl-3">
              <div class="text-terminal-bright font-semibold text-base">Constelaci√≥n Visible</div>
              <div class="text-lg">${skyData.constellation}</div>
            </div>

            <div class="border-l-2 border-terminal-dim pl-3">
              <div class="text-terminal-bright font-semibold text-base">Estaci√≥n del A√±o</div>
              <div class="text-lg">${skyData.season}</div>
            </div>
          </div>

          <div class="mb-4 p-3 bg-black bg-opacity-30 rounded border border-terminal-dim">
            <div class="text-terminal-bright font-semibold mb-2 text-base">üåå Curiosidad Astron√≥mica</div>
            <div class="text-base">${skyData.fact}</div>
          </div>

          <div class="mb-4 p-3 bg-black bg-opacity-30 rounded border border-terminal-dim">
            <div class="text-terminal-bright font-semibold mb-2 text-base">‚ú® Datos C√≥smicos</div>
            <div class="text-base space-y-1">
              <div>‚Ä¢ Has dado <span class="text-terminal-bright">${(daysAlive / 365.25).toFixed(2)}</span> vueltas al Sol</div>
              <div>‚Ä¢ La luz de tu nacimiento ha viajado <span class="text-terminal-bright">${((daysAlive * 299792 * 86400) / 1000000000).toFixed(2)}</span> mil millones de km</div>
              <div>‚Ä¢ En tu vida, la Tierra ha recorrido <span class="text-terminal-bright">${(daysAlive * 2.574).toFixed(0)}</span> millones de km en el espacio</div>
            </div>
          </div>

          <!-- Sistema Solar Interactivo -->
          <div class="mt-4">
            <div class="text-terminal-bright text-lg font-semibold mb-3">ü™ê Sistema Solar Interactivo</div>
            <div class="mb-3">
              <canvas id="solar-canvas-nasa" class="game-canvas mx-auto" width="400" height="400" style="border: 2px solid var(--terminal-dim); border-radius: 8px;"></canvas>
            </div>
            <div class="text-center text-xs text-terminal-dim mb-3">
              Visualizaci√≥n de √≥rbitas planetarias (simulada)
            </div>

            <div class="grid grid-cols-2 md:grid-cols-4 gap-2 text-xs">
              <div class="border border-terminal-dim p-2 rounded">
                <div class="text-terminal-bright font-semibold">‚òø Mercurio</div>
                <div class="text-terminal-dim">88 d√≠as/a√±o</div>
              </div>
              <div class="border border-terminal-dim p-2 rounded">
                <div class="text-terminal-bright font-semibold">‚ôÄ Venus</div>
                <div class="text-terminal-dim">225 d√≠as/a√±o</div>
              </div>
              <div class="border border-terminal-dim p-2 rounded">
                <div class="text-terminal-bright font-semibold">üåç Tierra</div>
                <div class="text-terminal-dim">365 d√≠as/a√±o</div>
              </div>
              <div class="border border-terminal-dim p-2 rounded">
                <div class="text-terminal-bright font-semibold">‚ôÇ Marte</div>
                <div class="text-terminal-dim">687 d√≠as/a√±o</div>
              </div>
              <div class="border border-terminal-dim p-2 rounded">
                <div class="text-terminal-bright font-semibold">‚ôÉ J√∫piter</div>
                <div class="text-terminal-dim">12 a√±os terrestres</div>
              </div>
              <div class="border border-terminal-dim p-2 rounded">
                <div class="text-terminal-bright font-semibold">‚ôÑ Saturno</div>
                <div class="text-terminal-dim">29 a√±os terrestres</div>
              </div>
              <div class="border border-terminal-dim p-2 rounded">
                <div class="text-terminal-bright font-semibold">‚ôÖ Urano</div>
                <div class="text-terminal-dim">84 a√±os terrestres</div>
              </div>
              <div class="border border-terminal-dim p-2 rounded">
                <div class="text-terminal-bright font-semibold">‚ôÜ Neptuno</div>
                <div class="text-terminal-dim">165 a√±os terrestres</div>
              </div>
            </div>
          </div>
        </div>
      `;

      nasaDataDiv.innerHTML = html;

      // Inicializar la visualizaci√≥n del sistema solar en el canvas alternativo
      setTimeout(() => {
        this.initializeAlternativeSolarSystem();
      }, 100);
    }

    private initializeAlternativeSolarSystem(): void {
      const canvas = document.getElementById('solar-canvas-nasa') as HTMLCanvasElement;
      if (!canvas) return;

      const ctx = canvas.getContext('2d');
      if (!ctx) return;

      const planets = [
        { name: 'Mercurio', distance: 40, angle: 0, speed: 0.04, size: 3, color: '#8c7853' },
        { name: 'Venus', distance: 60, angle: 0, speed: 0.03, size: 4, color: '#ffc649' },
        { name: 'Tierra', distance: 80, angle: 0, speed: 0.02, size: 4, color: '#6b93d6' },
        { name: 'Marte', distance: 100, angle: 0, speed: 0.018, size: 3, color: '#cd5c5c' },
        { name: 'J√∫piter', distance: 140, angle: 0, speed: 0.013, size: 8, color: '#d8ca9d' },
        { name: 'Saturno', distance: 180, angle: 0, speed: 0.009, size: 7, color: '#fad5a5' },
      ];

      const animate = () => {
        // Fondo espacial
        ctx.fillStyle = '#000000';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Estrellas
        ctx.fillStyle = '#ffffff';
        for (let i = 0; i < 100; i++) {
          const x = (i * 37) % canvas.width;
          const y = (i * 23) % canvas.height;
          ctx.fillRect(x, y, 1, 1);
        }

        // Sol
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, 20);
        gradient.addColorStop(0, '#ffff00');
        gradient.addColorStop(0.5, '#ff6600');
        gradient.addColorStop(1, '#ff0000');
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(centerX, centerY, 15, 0, Math.PI * 2);
        ctx.fill();

        // Planetas
        planets.forEach(planet => {
          planet.angle += planet.speed;
          const x = centerX + Math.cos(planet.angle) * planet.distance;
          const y = centerY + Math.sin(planet.angle) * planet.distance;

          // √ìrbita
          ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
          ctx.beginPath();
          ctx.arc(centerX, centerY, planet.distance, 0, Math.PI * 2);
          ctx.stroke();

          // Planeta
          ctx.fillStyle = planet.color;
          ctx.beginPath();
          ctx.arc(x, y, planet.size, 0, Math.PI * 2);
          ctx.fill();

          // Brillo
          ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
          ctx.beginPath();
          ctx.arc(x - 2, y - 2, planet.size / 2, 0, Math.PI * 2);
          ctx.fill();
        });

        requestAnimationFrame(animate);
      };

      animate();
    }

    private getZodiacSign(month: number, day: number): string {
      const signs = [
        { sign: '‚ôë Capricornio', end: [0, 19] },
        { sign: '‚ôí Acuario', end: [1, 18] },
        { sign: '‚ôì Piscis', end: [2, 20] },
        { sign: '‚ôà Aries', end: [3, 19] },
        { sign: '‚ôâ Tauro', end: [4, 20] },
        { sign: '‚ôä G√©minis', end: [5, 20] },
        { sign: '‚ôã C√°ncer', end: [6, 22] },
        { sign: '‚ôå Leo', end: [7, 22] },
        { sign: '‚ôç Virgo', end: [8, 22] },
        { sign: '‚ôé Libra', end: [9, 22] },
        { sign: '‚ôè Escorpio', end: [10, 21] },
        { sign: '‚ôê Sagitario', end: [11, 21] },
      ];

      for (let i = 0; i < signs.length; i++) {
        const [endMonth, endDay] = signs[i].end;
        if (month < endMonth || (month === endMonth && day <= endDay)) {
          return signs[i].sign;
        }
      }
      return signs[0].sign;
    }

    private getSkyDataForDate(
      month: number,
      _day: number
    ): { constellation: string; season: string; fact: string } {
      const skyInfo: { [key: number]: { constellation: string; season: string; fact: string } } = {
        0: {
          constellation: 'üåü Ori√≥n',
          season: '‚ùÑÔ∏è Invierno (Hemisferio Norte)',
          fact: 'Ori√≥n es una de las constelaciones m√°s reconocibles del cielo nocturno, visible desde ambos hemisferios.',
        },
        1: {
          constellation: 'üåü G√©minis',
          season: '‚ùÑÔ∏è Invierno (Hemisferio Norte)',
          fact: 'En febrero, la constelaci√≥n de G√©minis alcanza su punto m√°s alto en el cielo nocturno.',
        },
        2: {
          constellation: 'üåü Leo',
          season: 'üå∏ Primavera (Hemisferio Norte)',
          fact: 'Leo es una de las constelaciones del zod√≠aco m√°s brillantes, con su estrella principal Regulus.',
        },
        3: {
          constellation: 'üåü Virgo',
          season: 'üå∏ Primavera (Hemisferio Norte)',
          fact: 'Virgo contiene uno de los c√∫mulos de galaxias m√°s grandes conocidos: el C√∫mulo de Virgo.',
        },
        4: {
          constellation: 'üåü Bootes',
          season: 'üå∏ Primavera (Hemisferio Norte)',
          fact: 'Bootes contiene a Arturo, la tercera estrella m√°s brillante del cielo nocturno.',
        },
        5: {
          constellation: 'üåü Escorpio',
          season: '‚òÄÔ∏è Verano (Hemisferio Norte)',
          fact: 'Escorpio contiene la supergigante roja Antares, una estrella 850 veces m√°s grande que el Sol.',
        },
        6: {
          constellation: 'üåü Sagitario',
          season: '‚òÄÔ∏è Verano (Hemisferio Norte)',
          fact: 'Sagitario apunta hacia el centro de nuestra galaxia, la V√≠a L√°ctea.',
        },
        7: {
          constellation: 'üåü Cisne',
          season: '‚òÄÔ∏è Verano (Hemisferio Norte)',
          fact: 'El Cisne es prominente en verano y forma parte del famoso "Tri√°ngulo de Verano".',
        },
        8: {
          constellation: 'üåü Acuario',
          season: 'üçÇ Oto√±o (Hemisferio Norte)',
          fact: 'Acuario es una de las constelaciones m√°s antiguas reconocidas, datando de la Mesopotamia.',
        },
        9: {
          constellation: 'üåü Pegaso',
          season: 'üçÇ Oto√±o (Hemisferio Norte)',
          fact: 'Pegaso es famoso por el "Cuadrado de Pegaso", un asterismo f√°cilmente reconocible.',
        },
        10: {
          constellation: 'üåü Andr√≥meda',
          season: 'üçÇ Oto√±o (Hemisferio Norte)',
          fact: 'Andr√≥meda contiene la galaxia m√°s cercana a la V√≠a L√°ctea, visible a simple vista en cielos oscuros.',
        },
        11: {
          constellation: 'üåü Tauro',
          season: '‚ùÑÔ∏è Invierno (Hemisferio Norte)',
          fact: 'Tauro contiene las Pl√©yades, un c√∫mulo estelar de las m√°s j√≥venes estrellas cercanas a nosotros.',
        },
      };

      return skyInfo[month] || skyInfo[0];
    }

    private async displayNASAData(data: NASAAPODResponse): Promise<void> {
      const nasaDataDiv = document.getElementById('nasa-data');
      if (!nasaDataDiv) return;

      // Traducir t√≠tulo y explicaci√≥n
      nasaDataDiv.innerHTML = '<div class="loading-dots">Traduciendo contenido</div>';
      const translatedTitle = await this.translateToSpanish(data.title);
      const translatedExplanation = await this.translateToSpanish(data.explanation);

      const html = `
      <div class="border border-terminal-dim p-4 rounded">
        <div class="text-terminal-bright text-lg mb-4">
          ‚ñà IMAGEN ASTRON√ìMICA DEL D√çA DE TU NACIMIENTO
        </div>

        <div class="mb-3">
          <div class="text-terminal-text font-bold text-lg">${this.escapeHtml(translatedTitle)}</div>
          <div class="text-xs text-terminal-dim">${this.formatDate(data.date)}</div>
        </div>

        ${
          data.media_type === 'image'
            ? `
          <div class="mb-4">
            <div class="relative">
              <img
                src="https://corsproxy.io/?${encodeURIComponent(data.url)}"
                alt="${this.escapeHtml(translatedTitle)}"
                class="w-full max-w-lg mx-auto border-2 border-terminal-dim rounded hover:border-terminal-bright transition-colors block"
                style="display: block; max-height: 600px; object-fit: contain;"
                onload="console.log('‚úì Imagen calculadora cargada')"
                onerror="console.error('Error cargando imagen calculadora'); this.style.display='none'; this.nextElementSibling.style.display='block';"
              />
              <div style="display:none;" class="text-terminal-dim text-center p-4 border border-terminal-dim rounded">
                ‚ö†Ô∏è Error al cargar la imagen. <a href="${data.url}" target="_blank" class="text-terminal-bright hover:underline">Ver imagen original ‚Üí</a>
              </div>
            </div>
            <div class="text-center text-xs text-terminal-dim mt-2">
              <a href="${data.url}" target="_blank" rel="noopener noreferrer" class="text-terminal-text hover:text-terminal-bright">
                üîó Ver imagen original
              </a>
            </div>
          </div>
        `
            : `
          <div class="mb-4 text-terminal-dim">
            <a href="${data.url}" target="_blank" rel="noopener noreferrer" class="text-terminal-text hover:text-terminal-bright underline">
              Ver video/multimedia ‚Üí
            </a>
          </div>
        `
        }

        <div class="mt-4">
          <div class="text-terminal-bright font-semibold mb-2 text-base">üìñ Explicaci√≥n:</div>
          <div class="text-base leading-relaxed">
            ${this.escapeHtml(translatedExplanation)}
          </div>
        </div>

        <div class="mt-4 p-3 bg-black bg-opacity-30 rounded border border-terminal-dim">
          <div class="text-terminal-dim text-xs">
            <strong>T√≠tulo original:</strong> ${this.escapeHtml(data.title)}
          </div>
        </div>
      </div>
    `;

      nasaDataDiv.innerHTML = html;
    }

    private formatDate(dateString: string): string {
      const date = new Date(dateString);
      return date.toLocaleDateString('es-ES', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });
    }

    private async translateToSpanish(text: string): Promise<string> {
      try {
        const chunks = this.splitTextIntoChunks(text, 4500);
        const translatedChunks: string[] = [];

        for (const chunk of chunks) {
          const translated = await this.translateSinglePart(chunk);
          translatedChunks.push(translated);
          if (chunks.length > 1) {
            await new Promise(resolve => setTimeout(resolve, 500));
          }
        }

        return translatedChunks.join(' ');
      } catch (error) {
        console.warn('Translation failed, using original text:', error);
        return text;
      }
    }

    private splitTextIntoChunks(text: string, maxLength: number): string[] {
      if (text.length <= maxLength) {
        return [text];
      }

      const chunks: string[] = [];
      const sentences = text.match(/[^.!?]+[.!?]+/g) || [text];
      let currentChunk = '';

      for (const sentence of sentences) {
        if ((currentChunk + sentence).length > maxLength && currentChunk.length > 0) {
          chunks.push(currentChunk.trim());
          currentChunk = sentence;
        } else {
          currentChunk += sentence;
        }
      }

      if (currentChunk.length > 0) {
        chunks.push(currentChunk.trim());
      }

      return chunks;
    }

    private async translateSinglePart(text: string): Promise<string> {
      const maxRetries = 3;

      for (let attempt = 0; attempt < maxRetries; attempt++) {
        try {
          // M√©todo 1: Usar translate.googleapis.com sin autenticaci√≥n
          const googleResponse = await fetch(
            `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=es&dt=t&q=${encodeURIComponent(text)}`
          );

          if (googleResponse.ok) {
            const data = await googleResponse.json();
            if (data && data[0] && Array.isArray(data[0])) {
              const translatedText = data[0]
                .map((item: unknown[]) => (item as string[])[0])
                .join('');
              if (translatedText && translatedText.trim()) {
                return translatedText;
              }
            }
          }

          // M√©todo 2: Fallback a LibreTranslate
          const libreResponse = await fetch('https://libretranslate.com/translate', {
            method: 'POST',
            body: JSON.stringify({
              q: text,
              source: 'en',
              target: 'es',
              format: 'text',
            }),
            headers: { 'Content-Type': 'application/json' },
          });

          if (libreResponse.ok) {
            const data = await libreResponse.json();
            if (data.translatedText) {
              return data.translatedText;
            }
          }

          // M√©todo 3: Fallback a MyMemory
          const myMemoryResponse = await fetch(
            `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|es`
          );

          if (myMemoryResponse.ok) {
            const data = await myMemoryResponse.json();
            if (data.responseStatus === 200 && data.responseData?.translatedText) {
              return data.responseData.translatedText;
            }
          }

          if (attempt < maxRetries - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
          }
        } catch (error) {
          console.warn(`Intento ${attempt + 1} de traducci√≥n fall√≥:`, error);
          if (attempt < maxRetries - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
          }
        }
      }

      console.warn('Todos los m√©todos de traducci√≥n fallaron, usando texto original');
      return text;
    }

    private escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    private async generateBirthYearNews(birthDate: Date): Promise<void> {
      const year = birthDate.getFullYear();
      const month = birthDate.getMonth() + 1;
      const day = birthDate.getDate();

      // Obtener eventos hist√≥ricos reales del d√≠a y mes de nacimiento
      const historicalEvents = await this.fetchHistoricalEvents(month, day, year);
      this.displayBirthYearNews(historicalEvents, year, month);
    }

    private async fetchHistoricalEvents(
      month: number,
      day: number,
      birthYear: number
    ): Promise<TechNewsEvent[]> {
      try {
        // Formatear mes y d√≠a con padding de ceros
        const monthStr = month.toString().padStart(2, '0');
        const dayStr = day.toString().padStart(2, '0');

        // Usar la API de Wikimedia "On This Day" para obtener eventos hist√≥ricos
        const response = await fetch(
          `https://api.wikimedia.org/feed/v1/wikipedia/en/onthisday/all/${monthStr}/${dayStr}`
        );

        if (!response.ok) {
          console.warn('Error fetching historical events from Wikimedia API');
          return this.getFallbackTechEvents(birthYear);
        }

        const data = await response.json();

        // Filtrar eventos relevantes a tecnolog√≠a, ciencia o astronom√≠a
        const relevantEvents = this.filterTechScienceEvents(data.selected || [], birthYear);

        if (relevantEvents.length === 0) {
          // Si no hay eventos de tecnolog√≠a ese d√≠a, usar eventos generales del a√±o
          return this.getFallbackTechEvents(birthYear);
        }

        console.log(
          `‚úì Encontrados ${relevantEvents.length} eventos de tecnolog√≠a/ciencia para ${monthStr}/${dayStr}`
        );
        return relevantEvents;
      } catch (error) {
        console.error('Error fetching historical events:', error);
        return this.getFallbackTechEvents(birthYear);
      }
    }

    private async filterTechScienceEvents(
      events: unknown[],
      birthYear: number
    ): Promise<TechNewsEvent[]> {
      const techKeywords = [
        'technology',
        'computer',
        'internet',
        'software',
        'NASA',
        'space',
        'satellite',
        'telescope',
        'astronomy',
        'planet',
        'rocket',
        'science',
        'physics',
        'chemistry',
        'discovery',
        'invention',
        'engineer',
        'electronics',
        'digital',
        'innovation',
        'launched',
        'patent',
        'mathematician',
        'physicist',
        'chemist',
        'scientist',
        'astronomer',
        'galaxy',
        'universe',
        'cosmic',
        'AI',
        'artificial intelligence',
        'robot',
        'aviation',
        'aircraft',
        'flight',
      ];

      const filtered: TechNewsEvent[] = [];

      for (const event of events) {
        // Solo considerar eventos del a√±o de nacimiento o cercanos (¬±5 a√±os)
        const eventYear = event.year;
        if (Math.abs(eventYear - birthYear) > 5) continue;

        const text = event.text?.toLowerCase() || '';
        const pages = event.pages || [];

        // Verificar si el evento contiene palabras clave de tecnolog√≠a/ciencia
        const isTechRelated = techKeywords.some(keyword => text.includes(keyword.toLowerCase()));

        // Tambi√©n verificar las p√°ginas relacionadas
        const hasTechPages = pages.some((page: Record<string, unknown>) => {
          const title = page.displaytitle?.toLowerCase() || '';
          const description = page.description?.toLowerCase() || '';
          return techKeywords.some(
            keyword =>
              title.includes(keyword.toLowerCase()) || description.includes(keyword.toLowerCase())
          );
        });

        if (isTechRelated || hasTechPages) {
          // Obtener la mejor p√°gina relacionada
          const mainPage = pages[0];

          filtered.push({
            title: `${eventYear}: ${event.text}`,
            description:
              mainPage?.extract ||
              mainPage?.description ||
              'Evento significativo en la historia de la tecnolog√≠a y ciencia.',
            source: 'Wikipedia',
            url: mainPage?.content_urls?.desktop?.page || '#',
            publishedAt: `${eventYear}-${String(event.month || 1).padStart(2, '0')}-${String(event.day || 1).padStart(2, '0')}`,
          });
        }

        // Limitar a 3 eventos
        if (filtered.length >= 3) break;
      }

      // Traducir los eventos filtrados al espa√±ol
      return await this.translateEvents(filtered);
    }

    private async translateEvents(events: TechNewsEvent[]): Promise<TechNewsEvent[]> {
      const translatedEvents: TechNewsEvent[] = [];

      for (const event of events) {
        try {
          // Traducir t√≠tulo y descripci√≥n
          const translatedTitle = await this.translateToSpanish(event.title);
          const translatedDescription = await this.translateToSpanish(event.description);

          translatedEvents.push({
            ...event,
            title: translatedTitle,
            description: translatedDescription,
          });

          // Peque√±a pausa entre traducciones para evitar rate limiting
          if (events.length > 1) {
            await new Promise(resolve => setTimeout(resolve, 300));
          }
        } catch (error) {
          console.warn('Error traduciendo evento, usando original:', error);
          translatedEvents.push(event);
        }
      }

      return translatedEvents;
    }

    private getFallbackTechEvents(birthYear: number): TechNewsEvent[] {
      // Eventos tecnol√≥gicos importantes por d√©cada como fallback (en espa√±ol)
      const decades = [
        {
          start: 1950,
          events: [
            {
              title: 'Revoluci√≥n del transistor',
              desc: 'El transistor revoluciona la electr√≥nica, reemplazando las v√°lvulas de vac√≠o y permitiendo dispositivos m√°s peque√±os y eficientes.',
            },
            {
              title: 'Era temprana de la computaci√≥n',
              desc: 'Primeras computadoras comerciales comienzan a utilizarse en empresas e instituciones.',
            },
            {
              title: 'Inicio de la carrera espacial',
              desc: 'La Uni√≥n Sovi√©tica y Estados Unidos inician la competencia por la conquista del espacio.',
            },
          ],
        },
        {
          start: 1960,
          events: [
            {
              title: 'Programa Apollo',
              desc: 'NASA desarrolla el programa Apollo con el objetivo de llevar humanos a la Luna.',
            },
            {
              title: 'Circuitos integrados',
              desc: 'Los circuitos integrados permiten crear dispositivos electr√≥nicos m√°s complejos y compactos.',
            },
            {
              title: 'Precursor de ARPANET',
              desc: 'Se sientan las bases de lo que eventualmente se convertir√≠a en Internet.',
            },
          ],
        },
        {
          start: 1970,
          events: [
            {
              title: 'Invenci√≥n del microprocesador',
              desc: 'Intel lanza el primer microprocesador comercial, revolucionando la inform√°tica.',
            },
            {
              title: 'Computadoras personales emergen',
              desc: 'Las primeras computadoras personales llegan al mercado, haciendo la tecnolog√≠a m√°s accesible.',
            },
            {
              title: 'Misiones Voyager',
              desc: 'NASA lanza las sondas Voyager para explorar el sistema solar exterior.',
            },
          ],
        },
        {
          start: 1980,
          events: [
            {
              title: 'Revoluci√≥n del IBM PC',
              desc: 'IBM PC establece el est√°ndar para computadoras personales compatibles.',
            },
            {
              title: 'Protocolos de Internet',
              desc: 'Se establecen los protocolos TCP/IP que formar√≠an la base de Internet moderna.',
            },
            {
              title: 'Programa del Transbordador Espacial',
              desc: 'NASA opera transbordadores espaciales reutilizables, revolucionando el acceso al espacio.',
            },
          ],
        },
        {
          start: 1990,
          events: [
            {
              title: 'World Wide Web',
              desc: 'Tim Berners-Lee crea la World Wide Web, transformando Internet en una red global accesible.',
            },
            {
              title: 'Revoluci√≥n digital',
              desc: 'La tecnolog√≠a digital reemplaza sistemas anal√≥gicos en comunicaciones y multimedia.',
            },
            {
              title: 'Telescopio Espacial Hubble',
              desc: 'NASA lanza el Hubble, proporcionando im√°genes sin precedentes del universo.',
            },
          ],
        },
        {
          start: 2000,
          events: [
            {
              title: 'Era de los smartphones',
              desc: 'Los tel√©fonos inteligentes transforman la comunicaci√≥n y el acceso a la informaci√≥n.',
            },
            {
              title: 'Auge de las redes sociales',
              desc: 'Plataformas sociales cambian la forma en que las personas se conectan y comunican.',
            },
            {
              title: 'Rovers en Marte',
              desc: 'NASA env√≠a rovers a Marte para explorar el planeta rojo y buscar signos de vida.',
            },
          ],
        },
        {
          start: 2010,
          events: [
            {
              title: 'Computaci√≥n en la nube',
              desc: 'Los servicios en la nube transforman c√≥mo almacenamos datos y ejecutamos aplicaciones.',
            },
            {
              title: 'Avances en Inteligencia Artificial',
              desc: 'El aprendizaje profundo y las redes neuronales logran avances significativos.',
            },
            {
              title: 'Cohetes reutilizables de SpaceX',
              desc: 'SpaceX logra aterrizar y reutilizar cohetes, reduciendo el costo de acceso al espacio.',
            },
          ],
        },
        {
          start: 2020,
          events: [
            {
              title: 'Adaptaci√≥n tecnol√≥gica COVID-19',
              desc: 'La pandemia acelera la adopci√≥n de trabajo remoto y tecnolog√≠as de comunicaci√≥n.',
            },
            {
              title: 'Telescopio Espacial James Webb',
              desc: 'NASA lanza el telescopio m√°s poderoso jam√°s construido para observar el universo.',
            },
            {
              title: 'Modelos de lenguaje con IA',
              desc: 'Los modelos de lenguaje de inteligencia artificial alcanzan capacidades sin precedentes.',
            },
          ],
        },
      ];

      const decade = decades.find(d => birthYear >= d.start && birthYear < d.start + 10);
      const events = decade?.events || [
        {
          title: 'Evoluci√≥n tecnol√≥gica',
          desc: 'Durante esta era, la tecnolog√≠a continu√≥ evolucionando con importantes desarrollos.',
        },
        {
          title: 'Descubrimientos cient√≠ficos',
          desc: 'Se realizaron descubrimientos cient√≠ficos significativos en diversas √°reas.',
        },
        {
          title: 'Exploraci√≥n espacial',
          desc: 'La exploraci√≥n del espacio avanz√≥ con nuevas misiones y tecnolog√≠as.',
        },
      ];

      return events.slice(0, 3).map(event => ({
        title: `${birthYear}s: ${event.title}`,
        description: event.desc,
        source: 'Historia Tecnol√≥gica',
        url: '#',
        publishedAt: `${birthYear}-01-01`,
      }));
    }

    private generateHistoricalTechNews(year: number, month: number): TechNewsEvent[] {
      const techEvents: { [key: string]: TechNewsEvent[] } = {
        '1990': [
          {
            title: 'üåê Tim Berners-Lee crea la World Wide Web',
            description:
              'El cient√≠fico brit√°nico desarrolla el primer navegador web y servidor, revolucionando la comunicaci√≥n global.',
            source: 'Tech History',
          },
          {
            title: 'üíæ Microsoft lanza Windows 3.0',
            description:
              'Nueva versi√≥n del sistema operativo que populariza la interfaz gr√°fica en computadoras personales.',
            source: 'Computing News',
          },
        ],
        '1995': [
          {
            title: 'üîç Nace Yahoo!',
            description:
              'Jerry Yang y David Filo crean uno de los primeros directorios web, marcando el inicio de los motores de b√∫squeda.',
            source: 'Internet Archive',
          },
          {
            title: '‚òï Java es presentado por Sun Microsystems',
            description:
              'Lenguaje de programaci√≥n que revoluciona el desarrollo de aplicaciones multiplataforma.',
            source: 'Developer News',
          },
        ],
        '2000': [
          {
            title: 'üîé Google se convierte en el buscador m√°s popular',
            description:
              'El motor de b√∫squeda supera a sus competidores con su algoritmo PageRank.',
            source: 'Search Engine History',
          },
          {
            title: 'üì± Se lanza el primer tel√©fono con c√°mara',
            description: 'Sharp J-SH04 introduce la fotograf√≠a m√≥vil al mercado japon√©s.',
            source: 'Mobile Tech',
          },
        ],
        '2005': [
          {
            title: 'üìπ YouTube es fundado',
            description:
              'Plataforma que transformar√° la forma en que consumimos video en internet.',
            source: 'Media History',
          },
          {
            title: 'üó∫Ô∏è Google Maps revoluciona la navegaci√≥n',
            description: 'Servicio de mapas interactivos cambia la forma de explorar el mundo.',
            source: 'Geo Tech',
          },
        ],
        '2010': [
          {
            title: 'üì± Apple presenta el iPad',
            description: 'Dispositivo que crea la categor√≠a de tablets modernas.',
            source: 'Apple News',
          },
          {
            title: 'üì∏ Instagram es lanzado',
            description:
              'Red social de fotograf√≠a que alcanza 100,000 usuarios en su primera semana.',
            source: 'Social Media',
          },
        ],
        '2015': [
          {
            title: 'ü§ñ AlphaGo derrota al campe√≥n de Go',
            description: 'IA de DeepMind marca un hito en inteligencia artificial.',
            source: 'AI Research',
          },
          {
            title: 'üöó Tesla Autopilot es introducido',
            description: 'Sistema de conducci√≥n semiaut√≥noma en veh√≠culos de producci√≥n.',
            source: 'Auto Tech',
          },
        ],
        '2020': [
          {
            title: 'üß¨ Vacunas COVID-19 con tecnolog√≠a mRNA',
            description: 'Desarrollo r√©cord de vacunas usando nueva tecnolog√≠a gen√©tica.',
            source: 'BioTech News',
          },
          {
            title: 'üöÄ SpaceX lanza misi√≥n tripulada',
            description: 'Primera empresa privada en llevar astronautas a la ISS.',
            source: 'Space News',
          },
        ],
      };

      // Buscar eventos del a√±o m√°s cercano
      const yearKey = Object.keys(techEvents)
        .map(y => parseInt(y))
        .sort((a, b) => Math.abs(year - a) - Math.abs(year - b))[0]
        .toString();

      const events = techEvents[yearKey] || [
        {
          title: `üñ•Ô∏è Avances tecnol√≥gicos en ${year}`,
          description: `Durante este a√±o, la tecnolog√≠a continu√≥ evolucionando con importantes desarrollos en computaci√≥n y comunicaciones.`,
          source: 'Tech History',
        },
        {
          title: `üåç Internet en ${year}`,
          description: `La red global continu√≥ expandi√©ndose, conectando m√°s personas y transformando la sociedad.`,
          source: 'Internet Archive',
        },
      ];

      return events.map(event => ({
        ...event,
        url: '#',
        publishedAt: `${year}-${month.toString().padStart(2, '0')}-15`,
      }));
    }

    private displayBirthYearNews(news: TechNewsEvent[], year: number, month: number): void {
      const resultsDiv = document.getElementById('calculator-results');
      if (!resultsDiv) return;

      const monthNames = [
        'Enero',
        'Febrero',
        'Marzo',
        'Abril',
        'Mayo',
        'Junio',
        'Julio',
        'Agosto',
        'Septiembre',
        'Octubre',
        'Noviembre',
        'Diciembre',
      ];
      const monthName = monthNames[month - 1];

      const newsHtml = `
        <div class="border border-terminal-dim p-4 rounded mt-4">
          <div class="text-terminal-bright text-xl mb-4">
            ‚ñà EVENTOS HIST√ìRICOS EN TECNOLOG√çA Y CIENCIA
          </div>
          <div class="text-sm text-terminal-dim mb-4">
            Eventos relevantes cercanos a ${monthName} de ${year}
          </div>
          <div class="space-y-4">
            ${news
              .map(
                (article, index) => `
              <div class="border-l-2 border-terminal-dim pl-4 py-2">
                <div class="text-terminal-bright text-base font-semibold">
                  ${index + 1}. ${this.escapeHtml(article.title)}
                </div>
                <div class="text-base mt-1 leading-relaxed">
                  ${this.escapeHtml(article.description || 'Sin descripci√≥n')}
                </div>
                <div class="text-sm text-terminal-dim mt-2 flex items-center gap-2">
                  <span>üìö ${article.source}</span>
                  ${article.url && article.url !== '#' ? `<a href="${article.url}" target="_blank" rel="noopener noreferrer" class="text-terminal-text hover:text-terminal-bright hover:underline">Ver m√°s ‚Üí</a>` : ''}
                </div>
              </div>
            `
              )
              .join('')}
          </div>
          <div class="mt-4 p-3 bg-black bg-opacity-30 rounded border border-terminal-dim text-xs text-terminal-dim">
            üí° Datos obtenidos de Wikipedia. Los eventos se filtran por relevancia en tecnolog√≠a, ciencia y astronom√≠a.
          </div>
        </div>
      `;

      resultsDiv.innerHTML += newsHtml;
    }

    private exit(): void {
      this.terminal.printOutput('<div class="success-text">Volviendo al men√∫...</div>');
      setTimeout(() => {
        const event = new CustomEvent('loadView', { detail: { view: 'menu' } });
        document.dispatchEvent(event);

        // Ejecutar comando menu
        const input = document.getElementById('terminal-input') as HTMLInputElement;
        if (input) {
          input.value = 'menu';
          input.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter' }));
        }
      }, 500);
    }
  }

  document.addEventListener('loadView', (e: Event) => {
    const customEvent = e as CustomEvent;
    if (customEvent.detail.view === 'calculator') {
      const terminal = window.terminal;
      const calculatorComponent = document.getElementById('calculator-component');

      if (terminal && calculatorComponent) {
        terminal.printOutput(calculatorComponent.innerHTML);

        // Inicializar calculadora
        setTimeout(() => {
          const calculator = new CosmicCalculator(terminal);
          calculator.init();
        }, 100);
      }
    }
  });
</script>

<style>
  /* Estilos adicionales si es necesario */
</style>
