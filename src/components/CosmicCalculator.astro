---
// Componente Calculadora Cósmica
---

<div id="calculator-component" class="hidden">
  <div class="section-title">Calculadora Cósmica</div>

  <div class="mb-6">
    <div class="mb-4 text-terminal-text">
      Descubre tu edad en diferentes planetas y obtén datos astronómicos de tu fecha de nacimiento.
    </div>

    <div class="mb-6 space-y-4">
      <div>
        <label for="birthdate" class="mb-2 block text-terminal-dim">
          Ingresa tu fecha de nacimiento:
        </label>
        <input
          type="date"
          id="birthdate"
          class="terminal-input w-full rounded border border-terminal-dim px-3 py-2 md:w-auto"
          max={new Date().toISOString().split('T')[0]}
        />
      </div>

      <div class="flex gap-2">
        <button id="calculator-submit" class="menu-item px-4 py-2"> Calcular </button>
        <button id="calculator-exit" class="menu-item px-4 py-2"> Volver al menú </button>
      </div>
    </div>

    <div id="calculator-results" class="hidden">
      <!-- Resultados se mostrarán aquí -->
    </div>

    <div id="solar-system" class="mt-6 hidden">
      <div class="section-title">Sistema Solar Interactivo</div>
      <div class="mb-4">
        <canvas id="solar-canvas" class="game-canvas" width="400" height="400"></canvas>
      </div>
      <div class="text-center text-xs text-terminal-dim">
        Visualización de órbitas planetarias (simulada)
      </div>
    </div>

    <div id="nasa-data" class="mt-6 hidden">
      <!-- Datos de NASA se mostrarán aquí -->
    </div>
  </div>
</div>

<script>
  import type { TerminalController } from '../types/terminal';

  class SolarSystemVisualization {
    private canvas!: HTMLCanvasElement;
    private ctx!: CanvasRenderingContext2D;
    private animationId?: number;
    private planets: {
      name: string;
      distance: number;
      angle: number;
      speed: number;
      size: number;
      color: string;
    }[] = [
      { name: 'Mercurio', distance: 40, angle: 0, speed: 0.04, size: 3, color: '#8c7853' },
      { name: 'Venus', distance: 60, angle: 0, speed: 0.03, size: 4, color: '#ffc649' },
      { name: 'Tierra', distance: 80, angle: 0, speed: 0.02, size: 4, color: '#6b93d6' },
      { name: 'Marte', distance: 100, angle: 0, speed: 0.018, size: 3, color: '#cd5c5c' },
      { name: 'Júpiter', distance: 140, angle: 0, speed: 0.013, size: 8, color: '#d8ca9d' },
      { name: 'Saturno', distance: 180, angle: 0, speed: 0.009, size: 7, color: '#fad5a5' },
      { name: 'Urano', distance: 220, angle: 0, speed: 0.006, size: 5, color: '#4fd0e7' },
      { name: 'Neptuno', distance: 260, angle: 0, speed: 0.005, size: 5, color: '#4b70dd' },
    ];

    start(): void {
      this.canvas = document.getElementById('solar-canvas') as HTMLCanvasElement;
      if (!this.canvas) return;

      this.ctx = this.canvas.getContext('2d')!;
      this.animate();
    }

    stop(): void {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
      }
    }

    private animate(): void {
      this.animationId = requestAnimationFrame(() => this.animate());

      // Fondo espacial
      this.ctx.fillStyle = '#000000';
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

      // Estrellas
      this.drawStars();

      // Sol
      this.drawSun();

      // Planetas
      this.planets.forEach(planet => {
        this.updatePlanet(planet);
        this.drawPlanet(planet);
      });
    }

    private drawStars(): void {
      this.ctx.fillStyle = '#ffffff';
      for (let i = 0; i < 100; i++) {
        const x = (i * 37) % this.canvas.width;
        const y = (i * 23) % this.canvas.height;
        this.ctx.fillRect(x, y, 1, 1);
      }
    }

    private drawSun(): void {
      const centerX = this.canvas.width / 2;
      const centerY = this.canvas.height / 2;

      // Brillo del sol
      const gradient = this.ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, 20);
      gradient.addColorStop(0, '#ffff00');
      gradient.addColorStop(0.5, '#ff6600');
      gradient.addColorStop(1, '#ff0000');

      this.ctx.fillStyle = gradient;
      this.ctx.beginPath();
      this.ctx.arc(centerX, centerY, 15, 0, Math.PI * 2);
      this.ctx.fill();
    }

    private updatePlanet(planet: (typeof this.planets)[0]): void {
      planet.angle += planet.speed;
    }

    private drawPlanet(planet: (typeof this.planets)[0]): void {
      const centerX = this.canvas.width / 2;
      const centerY = this.canvas.height / 2;

      const x = centerX + Math.cos(planet.angle) * planet.distance;
      const y = centerY + Math.sin(planet.angle) * planet.distance;

      // Órbita
      this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
      this.ctx.beginPath();
      this.ctx.arc(centerX, centerY, planet.distance, 0, Math.PI * 2);
      this.ctx.stroke();

      // Planeta
      this.ctx.fillStyle = planet.color;
      this.ctx.beginPath();
      this.ctx.arc(x, y, planet.size, 0, Math.PI * 2);
      this.ctx.fill();

      // Brillo
      this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
      this.ctx.beginPath();
      this.ctx.arc(x - 2, y - 2, planet.size / 2, 0, Math.PI * 2);
      this.ctx.fill();
    }
  }

  interface PlanetaryAge {
    planet: string;
    age: number;
    orbitalPeriod: number;
  }

  interface NASAAPODResponse {
    title: string;
    explanation: string;
    url: string;
    date: string;
    media_type: string;
  }

  class CosmicCalculator {
    private terminal: TerminalController;
    private nasaApiKey: string;
    private solarSystem: SolarSystemVisualization;

    // Periodos orbitales en días terrestres
    private planets = {
      Mercurio: 87.97,
      Venus: 224.7,
      Tierra: 365.26,
      Marte: 686.98,
      Júpiter: 4332.59,
      Saturno: 10759.22,
      Urano: 30688.5,
      Neptuno: 60182,
    };

    constructor(terminal: TerminalController) {
      this.terminal = terminal;
      this.nasaApiKey = import.meta.env.PUBLIC_NASA_API_KEY || 'DEMO_KEY';
      this.solarSystem = new SolarSystemVisualization();
    }

    init(): void {
      const submitBtn = document.getElementById('calculator-submit');
      const exitBtn = document.getElementById('calculator-exit');

      if (submitBtn) {
        submitBtn.addEventListener('click', () => this.calculate());
      }

      if (exitBtn) {
        exitBtn.addEventListener('click', () => this.exit());
      }

      const birthdateInput = document.getElementById('birthdate') as HTMLInputElement;
      if (birthdateInput) {
        birthdateInput.addEventListener('keydown', e => {
          if (e.key === 'Enter') {
            this.calculate();
          }
        });
      }
    }

    private calculate(): void {
      const birthdateInput = document.getElementById('birthdate') as HTMLInputElement;
      const resultsDiv = document.getElementById('calculator-results');
      const nasaDataDiv = document.getElementById('nasa-data');

      if (!birthdateInput || !resultsDiv || !nasaDataDiv) return;

      const birthdate = birthdateInput.value;

      if (!birthdate) {
        alert('Por favor ingresa una fecha de nacimiento válida.');
        return;
      }

      const birthDate = new Date(birthdate);
      const today = new Date();

      if (birthDate > today) {
        alert('La fecha de nacimiento no puede ser en el futuro.');
        return;
      }

      // Calcular edades planetarias
      const daysPassed = Math.floor(
        (today.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24)
      );
      const ages: PlanetaryAge[] = [];

      for (const [planet, orbitalPeriod] of Object.entries(this.planets)) {
        const age = daysPassed / orbitalPeriod;
        ages.push({ planet, age, orbitalPeriod });
      }

      // Mostrar resultados
      this.displayResults(ages, birthDate, daysPassed);

      // Mostrar sistema solar
      this.showSolarSystem();

      // Generar noticias del año de nacimiento
      this.generateBirthYearNews(birthDate.getFullYear());

      // Obtener datos de NASA
      this.fetchNASAData(birthdate);
    }

    private displayResults(ages: PlanetaryAge[], birthDate: Date, daysPassed: number): void {
      const resultsDiv = document.getElementById('calculator-results');
      if (!resultsDiv) return;

      resultsDiv.classList.remove('hidden');

      // Calcular edad en formato humano
      const humanAge = this.calculateHumanAge(birthDate);

      let html = `
        <div class="border border-terminal-dim p-4 rounded">
          <div class="text-terminal-bright text-lg mb-4">
            █ TU EDAD EN EL SISTEMA SOLAR
          </div>

          <div class="mb-4 text-sm">
            <div>Fecha de nacimiento: ${birthDate.toLocaleDateString('es-ES')}</div>
            <div class="text-terminal-bright">Edad terrestre: ${humanAge}</div>
            <div>Días vividos: ${daysPassed.toLocaleString('es-ES')}</div>
            <div>Horas vividas: ${(daysPassed * 24).toLocaleString('es-ES')}</div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      `;

      ages.forEach(({ planet, age, orbitalPeriod }) => {
        const humanPlanetAge = this.calculateHumanAgeFromDecimal(age);
        html += `
          <div class="border-l-2 border-terminal-dim pl-3">
            <div class="text-terminal-text font-bold">${planet}</div>
            <div class="text-2xl text-terminal-bright">${humanPlanetAge}</div>
            <div class="text-xs text-terminal-dim">años ${planet.toLowerCase()}ianos</div>
            <div class="text-xs text-terminal-dim mt-1">
              1 año = ${orbitalPeriod.toFixed(0)} días terrestres
            </div>
          </div>
        `;
      });

      html += `
          </div>
        </div>
      `;

      resultsDiv.innerHTML = html;
    }

    private calculateHumanAge(birthDate: Date): string {
      const today = new Date();
      let years = today.getFullYear() - birthDate.getFullYear();
      let months = today.getMonth() - birthDate.getMonth();
      let days = today.getDate() - birthDate.getDate();

      if (days < 0) {
        months--;
        days += new Date(today.getFullYear(), today.getMonth(), 0).getDate();
      }

      if (months < 0) {
        years--;
        months += 12;
      }

      const parts = [];
      if (years > 0) parts.push(`${years} año${years !== 1 ? 's' : ''}`);
      if (months > 0) parts.push(`${months} mes${months !== 1 ? 'es' : ''}`);
      if (days > 0) parts.push(`${days} día${days !== 1 ? 's' : ''}`);

      return parts.join(', ') || 'Menos de un día';
    }

    private calculateHumanAgeFromDecimal(decimalAge: number): string {
      const years = Math.floor(decimalAge);
      const remainingDays = (decimalAge - years) * 365.25;
      const months = Math.floor(remainingDays / 30.44);
      const days = Math.floor(remainingDays % 30.44);

      const parts = [];
      if (years > 0) parts.push(`${years} año${years !== 1 ? 's' : ''}`);
      if (months > 0) parts.push(`${months} mes${months !== 1 ? 'es' : ''}`);
      if (days > 0) parts.push(`${days} día${days !== 1 ? 's' : ''}`);

      return parts.join(', ') || 'Menos de un día';
    }

    private async fetchNASAData(birthdate: string): Promise<void> {
      const nasaDataDiv = document.getElementById('nasa-data');
      if (!nasaDataDiv) return;

      nasaDataDiv.classList.remove('hidden');
      nasaDataDiv.innerHTML = '<div class="loading-dots">Cargando datos de NASA</div>';

      try {
        // Fetch APOD (Astronomy Picture of the Day) para la fecha de nacimiento
        const apodResponse = await fetch(
          `https://api.nasa.gov/planetary/apod?api_key=${this.nasaApiKey}&date=${birthdate}`
        );

        if (apodResponse.ok) {
          const apodData: NASAAPODResponse = await apodResponse.json();
          this.displayNASAData(apodData);
        } else {
          const isDemoKey =
            this.nasaApiKey === 'DEMO_KEY' || this.nasaApiKey === 'tu_clave_real_de_nasa_aqui';
          nasaDataDiv.innerHTML = `
            <div class="text-terminal-dim">
              ${
                isDemoKey
                  ? '⚠️ Clave API de NASA requerida para mostrar la imagen astronómica del día de tu nacimiento. Obtén una clave gratuita en api.nasa.gov y configúrala en el archivo .env'
                  : 'No hay datos de NASA disponibles para esta fecha específica.'
              }
            </div>
          `;
        }
      } catch (error) {
        console.error('Error fetching NASA data:', error);
        nasaDataDiv.innerHTML = '<div class="error-text">Error al cargar datos de NASA.</div>';
      }
    }

    private displayNASAData(data: NASAAPODResponse): void {
      const nasaDataDiv = document.getElementById('nasa-data');
      if (!nasaDataDiv) return;

      const html = `
      <div class="border border-terminal-dim p-4 rounded">
        <div class="text-terminal-bright text-lg mb-4">
          █ IMAGEN ASTRONÓMICA DEL DÍA DE TU NACIMIENTO
        </div>

        <div class="mb-3">
          <div class="text-terminal-text font-bold text-lg">${this.escapeHtml(data.title)}</div>
          <div class="text-xs text-terminal-dim">${data.date}</div>
        </div>

        ${
          data.media_type === 'image'
            ? `
          <div class="mb-4">
            <a href="${data.url}" target="_blank" rel="noopener noreferrer">
              <img
                src="${data.url}"
                alt="${this.escapeHtml(data.title)}"
                class="w-full max-w-md mx-auto border border-terminal-dim rounded"
                loading="lazy"
              />
            </a>
          </div>
        `
            : `
          <div class="mb-4 text-terminal-dim">
            <a href="${data.url}" target="_blank" rel="noopener noreferrer" class="text-terminal-text hover:text-terminal-bright underline">
              Ver video/multimedia →
            </a>
          </div>
        `
        }

        <div class="text-sm">
          ${this.escapeHtml(data.explanation)}
        </div>
      </div>
    `;

      nasaDataDiv.innerHTML = html;
    }

    private escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    private showSolarSystem(): void {
      const solarSystemDiv = document.getElementById('solar-system');
      if (solarSystemDiv) {
        solarSystemDiv.classList.remove('hidden');
        setTimeout(() => {
          this.solarSystem.start();
        }, 100);
      }
    }

    private async generateBirthYearNews(year: number): Promise<void> {
      const newsApiKey = import.meta.env.PUBLIC_NEWS_API_KEY;

      if (!newsApiKey || newsApiKey === 'your_newsapi_key_here') {
        this.displayBirthYearNewsError();
        return;
      }

      try {
        // Generar noticias históricas del año de nacimiento
        const historicalNews = await this.fetchHistoricalNews(year);

        if (historicalNews.length === 0) {
          this.displayBirthYearNewsError();
          return;
        }

        this.displayBirthYearNews(historicalNews, year);
      } catch (error) {
        console.error('Error generating birth year news:', error);
        this.displayBirthYearNewsError();
      }
    }

    private async fetchHistoricalNews(year: number): Promise<any[]> {
      const newsApiKey = import.meta.env.PUBLIC_NEWS_API_KEY;
      const endYear = year + 1;
      const fromDate = `${year}-01-01`;
      const toDate = `${endYear}-01-01`;

      const response = await fetch(
        `https://newsapi.org/v2/everything?q=history OR historical OR events&from=${fromDate}&to=${toDate}&language=es,en&sortBy=relevancy&pageSize=3&apiKey=${newsApiKey}`
      );

      if (!response.ok) {
        throw new Error('Error fetching historical news');
      }

      const data = await response.json();
      return data.articles || [];
    }

    private displayBirthYearNews(news: any[], year: number): void {
      const resultsDiv = document.getElementById('calculator-results');
      if (!resultsDiv) return;

      const newsHtml = `
        <div class="border border-terminal-dim p-4 rounded mt-4">
          <div class="text-terminal-bright text-lg mb-4">
            █ NOTICIAS DEL AÑO ${year}
          </div>
          <div class="space-y-4">
            ${news
              .map(
                (article, index) => `
              <div class="border-l-2 border-terminal-dim pl-4 py-2">
                <div class="text-terminal-bright">${index + 1}. ${this.escapeHtml(article.title)}</div>
                <div class="text-sm mt-1">${this.escapeHtml(article.description || 'Sin descripción')}</div>
                <div class="text-xs text-terminal-dim mt-2">
                  <span>${article.source.name}</span> |
                  <a href="${article.url}" target="_blank" rel="noopener noreferrer"
                     class="text-terminal-text hover:text-terminal-bright underline">
                    Leer más →
                  </a>
                </div>
              </div>
            `
              )
              .join('')}
          </div>
        </div>
      `;

      resultsDiv.innerHTML += newsHtml;
    }

    private displayBirthYearNewsError(): void {
      const resultsDiv = document.getElementById('calculator-results');
      if (!resultsDiv) return;

      const newsApiKey = import.meta.env.PUBLIC_NEWS_API_KEY;
      const isDemoKey =
        !newsApiKey ||
        newsApiKey === 'your_newsapi_key_here' ||
        newsApiKey === 'demo_key_for_newsapi' ||
        newsApiKey === 'tu_clave_real_de_newsapi_aqui';

      const errorHtml = `
        <div class="border border-terminal-dim p-4 rounded mt-4">
          <div class="text-terminal-bright text-lg mb-4">
            █ NOTICIAS DEL AÑO DE NACIMIENTO
          </div>
          <div class="text-terminal-dim">
            ${
              isDemoKey
                ? '⚠️ Clave API de NewsAPI requerida para mostrar noticias históricas del año de nacimiento. Obtén una clave gratuita en newsapi.org y configúrala en el archivo .env'
                : 'No se pudieron cargar noticias históricas para este año específico.'
            }
          </div>
        </div>
      `;

      resultsDiv.innerHTML += errorHtml;
    }

    private exit(): void {
      this.solarSystem.stop();
      this.terminal.printOutput('<div class="success-text">Volviendo al menú...</div>');
      setTimeout(() => {
        const event = new CustomEvent('loadView', { detail: { view: 'menu' } });
        document.dispatchEvent(event);

        // Ejecutar comando menu
        const input = document.getElementById('terminal-input') as HTMLInputElement;
        if (input) {
          input.value = 'menu';
          input.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter' }));
        }
      }, 500);
    }
  }

  document.addEventListener('loadView', (e: Event) => {
    const customEvent = e as CustomEvent;
    if (customEvent.detail.view === 'calculator') {
      const terminal = window.terminal;
      const calculatorComponent = document.getElementById('calculator-component');

      if (terminal && calculatorComponent) {
        terminal.printOutput(calculatorComponent.innerHTML);

        // Inicializar calculadora
        setTimeout(() => {
          const calculator = new CosmicCalculator(terminal);
          calculator.init();
        }, 100);
      }
    }
  });
</script>

<style>
  /* Estilos adicionales si es necesario */
</style>
