---
// Componente Calculadora Cósmica
---

<div id="calculator-component" class="hidden">
  <div class="section-title">Calculadora Cósmica</div>

  <div class="mb-6">
    <div class="mb-4 text-terminal-text">
      Descubre tu edad en diferentes planetas y obtén datos astronómicos de tu fecha de nacimiento.
    </div>

    <div class="mb-6 space-y-4">
      <div>
        <label for="birthdate" class="mb-2 block text-base text-terminal-bright">
          Ingresa tu fecha de nacimiento:
        </label>
        <input
          type="date"
          id="birthdate"
          class="terminal-input w-full rounded border-2 border-terminal-bright bg-black px-4 py-3 text-lg text-terminal-text md:w-auto"
          style="color-scheme: dark;"
          max={new Date().toISOString().split('T')[0]}
        />
      </div>

      <div class="flex gap-2">
        <button id="calculator-submit" class="menu-item px-4 py-2"> Calcular </button>
        <button id="calculator-exit" class="menu-item px-4 py-2"> Volver al menú </button>
      </div>
    </div>

    <div id="calculator-results" class="hidden">
      <!-- Resultados se mostrarán aquí -->
    </div>

    <div id="solar-system" class="mt-6 hidden">
      <div class="section-title">Sistema Solar Interactivo</div>
      <div class="mb-4">
        <canvas id="solar-canvas" class="game-canvas" width="400" height="400"></canvas>
      </div>
      <div class="text-center text-xs text-terminal-dim">
        Visualización de órbitas planetarias (simulada)
      </div>
    </div>

    <div id="nasa-data" class="mt-6 hidden">
      <!-- Datos de NASA se mostrarán aquí -->
    </div>
  </div>
</div>

<script>
  import type { TerminalController } from '../types/terminal';

  class SolarSystemVisualization {
    private canvas!: HTMLCanvasElement;
    private ctx!: CanvasRenderingContext2D;
    private animationId?: number;
    private planets: {
      name: string;
      distance: number;
      angle: number;
      speed: number;
      size: number;
      color: string;
    }[] = [
      { name: 'Mercurio', distance: 40, angle: 0, speed: 0.04, size: 3, color: '#8c7853' },
      { name: 'Venus', distance: 60, angle: 0, speed: 0.03, size: 4, color: '#ffc649' },
      { name: 'Tierra', distance: 80, angle: 0, speed: 0.02, size: 4, color: '#6b93d6' },
      { name: 'Marte', distance: 100, angle: 0, speed: 0.018, size: 3, color: '#cd5c5c' },
      { name: 'Júpiter', distance: 140, angle: 0, speed: 0.013, size: 8, color: '#d8ca9d' },
      { name: 'Saturno', distance: 180, angle: 0, speed: 0.009, size: 7, color: '#fad5a5' },
      { name: 'Urano', distance: 220, angle: 0, speed: 0.006, size: 5, color: '#4fd0e7' },
      { name: 'Neptuno', distance: 260, angle: 0, speed: 0.005, size: 5, color: '#4b70dd' },
    ];

    start(): void {
      this.canvas = document.getElementById('solar-canvas') as HTMLCanvasElement;
      if (!this.canvas) return;

      this.ctx = this.canvas.getContext('2d')!;
      this.animate();
    }

    stop(): void {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
      }
    }

    private animate(): void {
      this.animationId = requestAnimationFrame(() => this.animate());

      // Fondo espacial
      this.ctx.fillStyle = '#000000';
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

      // Estrellas
      this.drawStars();

      // Sol
      this.drawSun();

      // Planetas
      this.planets.forEach(planet => {
        this.updatePlanet(planet);
        this.drawPlanet(planet);
      });
    }

    private drawStars(): void {
      this.ctx.fillStyle = '#ffffff';
      for (let i = 0; i < 100; i++) {
        const x = (i * 37) % this.canvas.width;
        const y = (i * 23) % this.canvas.height;
        this.ctx.fillRect(x, y, 1, 1);
      }
    }

    private drawSun(): void {
      const centerX = this.canvas.width / 2;
      const centerY = this.canvas.height / 2;

      // Brillo del sol
      const gradient = this.ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, 20);
      gradient.addColorStop(0, '#ffff00');
      gradient.addColorStop(0.5, '#ff6600');
      gradient.addColorStop(1, '#ff0000');

      this.ctx.fillStyle = gradient;
      this.ctx.beginPath();
      this.ctx.arc(centerX, centerY, 15, 0, Math.PI * 2);
      this.ctx.fill();
    }

    private updatePlanet(planet: (typeof this.planets)[0]): void {
      planet.angle += planet.speed;
    }

    private drawPlanet(planet: (typeof this.planets)[0]): void {
      const centerX = this.canvas.width / 2;
      const centerY = this.canvas.height / 2;

      const x = centerX + Math.cos(planet.angle) * planet.distance;
      const y = centerY + Math.sin(planet.angle) * planet.distance;

      // Órbita
      this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
      this.ctx.beginPath();
      this.ctx.arc(centerX, centerY, planet.distance, 0, Math.PI * 2);
      this.ctx.stroke();

      // Planeta
      this.ctx.fillStyle = planet.color;
      this.ctx.beginPath();
      this.ctx.arc(x, y, planet.size, 0, Math.PI * 2);
      this.ctx.fill();

      // Brillo
      this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
      this.ctx.beginPath();
      this.ctx.arc(x - 2, y - 2, planet.size / 2, 0, Math.PI * 2);
      this.ctx.fill();
    }
  }

  interface PlanetaryAge {
    planet: string;
    age: number;
    orbitalPeriod: number;
  }

  interface NASAAPODResponse {
    title: string;
    explanation: string;
    url: string;
    date: string;
    media_type: string;
  }

  interface TechNewsEvent {
    title: string;
    description: string;
    source: string;
    url?: string;
    publishedAt?: string;
  }

  class CosmicCalculator {
    private terminal: TerminalController;
    private nasaApiKey: string;
    private solarSystem: SolarSystemVisualization;

    // Periodos orbitales en días terrestres
    private planets = {
      Mercurio: 87.97,
      Venus: 224.7,
      Tierra: 365.26,
      Marte: 686.98,
      Júpiter: 4332.59,
      Saturno: 10759.22,
      Urano: 30688.5,
      Neptuno: 60182,
    };

    constructor(terminal: TerminalController) {
      this.terminal = terminal;
      this.nasaApiKey = import.meta.env.PUBLIC_NASA_API_KEY || 'DEMO_KEY';
      this.solarSystem = new SolarSystemVisualization();
    }

    init(): void {
      const submitBtn = document.getElementById('calculator-submit');
      const exitBtn = document.getElementById('calculator-exit');

      if (submitBtn) {
        submitBtn.addEventListener('click', () => this.calculate());
      }

      if (exitBtn) {
        exitBtn.addEventListener('click', () => this.exit());
      }

      const birthdateInput = document.getElementById('birthdate') as HTMLInputElement;
      if (birthdateInput) {
        birthdateInput.addEventListener('keydown', e => {
          if (e.key === 'Enter') {
            this.calculate();
          }
        });
      }
    }

    private calculate(): void {
      const birthdateInput = document.getElementById('birthdate') as HTMLInputElement;
      const resultsDiv = document.getElementById('calculator-results');
      const nasaDataDiv = document.getElementById('nasa-data');

      if (!birthdateInput || !resultsDiv || !nasaDataDiv) return;

      const birthdate = birthdateInput.value;

      if (!birthdate) {
        alert('Por favor ingresa una fecha de nacimiento válida.');
        return;
      }

      const birthDate = new Date(birthdate);
      const today = new Date();

      if (birthDate > today) {
        alert('La fecha de nacimiento no puede ser en el futuro.');
        return;
      }

      // Limpiar resultados anteriores completamente
      resultsDiv.innerHTML = '';
      nasaDataDiv.innerHTML = '';

      // Calcular edades planetarias
      const daysPassed = Math.floor(
        (today.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24)
      );
      const ages: PlanetaryAge[] = [];

      for (const [planet, orbitalPeriod] of Object.entries(this.planets)) {
        const age = daysPassed / orbitalPeriod;
        ages.push({ planet, age, orbitalPeriod });
      }

      // Mostrar resultados
      this.displayResults(ages, birthDate, daysPassed);

      // Generar noticias del año de nacimiento (debe ejecutarse después de displayResults)
      this.generateBirthYearNews(birthDate);

      // Mostrar sistema solar
      this.showSolarSystem();

      // Obtener datos de NASA
      this.fetchNASAData(birthdate);
    }

    private displayResults(ages: PlanetaryAge[], birthDate: Date, daysPassed: number): void {
      const resultsDiv = document.getElementById('calculator-results');
      if (!resultsDiv) return;

      resultsDiv.classList.remove('hidden');

      // Calcular edad en formato humano
      const humanAge = this.calculateHumanAge(birthDate);

      let html = `
        <div class="border border-terminal-dim p-4 rounded">
          <div class="text-terminal-bright text-xl mb-4">
            █ TU EDAD EN EL SISTEMA SOLAR
          </div>

          <div class="mb-4 text-base">
            <div>Fecha de nacimiento: <span class="text-terminal-bright">${birthDate.toLocaleDateString('es-ES')}</span></div>
            <div class="text-terminal-bright text-lg">Edad terrestre: ${humanAge}</div>
            <div>Días vividos: <span class="text-terminal-bright">${daysPassed.toLocaleString('es-ES')}</span></div>
            <div>Horas vividas: <span class="text-terminal-bright">${(daysPassed * 24).toLocaleString('es-ES')}</span></div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      `;

      ages.forEach(({ planet, age, orbitalPeriod }) => {
        const humanPlanetAge = this.calculateHumanAgeFromDecimal(age);
        html += `
          <div class="border-l-2 border-terminal-dim pl-3 py-2">
            <div class="text-terminal-text font-bold text-base">${planet}</div>
            <div class="text-lg text-terminal-bright font-semibold">${humanPlanetAge}</div>
            <div class="text-sm text-terminal-dim">años ${planet.toLowerCase()}ianos</div>
            <div class="text-sm text-terminal-dim mt-1">
              1 año = ${orbitalPeriod.toFixed(0)} días terrestres
            </div>
          </div>
        `;
      });

      html += `
          </div>
        </div>
      `;

      resultsDiv.innerHTML = html;
    }

    private calculateHumanAge(birthDate: Date): string {
      const today = new Date();
      let years = today.getFullYear() - birthDate.getFullYear();
      let months = today.getMonth() - birthDate.getMonth();
      let days = today.getDate() - birthDate.getDate();

      if (days < 0) {
        months--;
        days += new Date(today.getFullYear(), today.getMonth(), 0).getDate();
      }

      if (months < 0) {
        years--;
        months += 12;
      }

      const parts = [];
      if (years > 0) parts.push(`${years} año${years !== 1 ? 's' : ''}`);
      if (months > 0) parts.push(`${months} mes${months !== 1 ? 'es' : ''}`);
      if (days > 0) parts.push(`${days} día${days !== 1 ? 's' : ''}`);

      return parts.join(', ') || 'Menos de un día';
    }

    private calculateHumanAgeFromDecimal(decimalAge: number): string {
      const years = Math.floor(decimalAge);
      const remainingDays = (decimalAge - years) * 365.25;
      const months = Math.floor(remainingDays / 30.44);
      const days = Math.floor(remainingDays % 30.44);

      const parts = [];
      if (years > 0) parts.push(`${years} año${years !== 1 ? 's' : ''}`);
      if (months > 0) parts.push(`${months} mes${months !== 1 ? 'es' : ''}`);
      if (days > 0) parts.push(`${days} día${days !== 1 ? 's' : ''}`);

      return parts.join(', ') || 'Menos de un día';
    }

    private async fetchNASAData(birthdate: string): Promise<void> {
      const nasaDataDiv = document.getElementById('nasa-data');
      if (!nasaDataDiv) return;

      nasaDataDiv.classList.remove('hidden');
      nasaDataDiv.innerHTML = '<div class="loading-dots">Cargando datos astronómicos</div>';

      // APOD solo existe desde junio 16, 1995
      const birthDate = new Date(birthdate);
      const apodStartDate = new Date('1995-06-16');

      // Si la fecha es anterior a APOD o la clave es demo, usar contenido alternativo directamente
      if (
        birthDate < apodStartDate ||
        this.nasaApiKey === 'DEMO_KEY' ||
        this.nasaApiKey === 'tu_clave_real_de_nasa_aqui'
      ) {
        this.displayAlternativeAstronomyData(birthdate);
        return;
      }

      try {
        // Fetch APOD (Astronomy Picture of the Day) para la fecha de nacimiento
        const apodResponse = await fetch(
          `https://api.nasa.gov/planetary/apod?api_key=${this.nasaApiKey}&date=${birthdate}`
        );

        if (apodResponse.ok) {
          const apodData: NASAAPODResponse = await apodResponse.json();
          this.displayNASAData(apodData);
        } else {
          // Si falla la API, mostrar contenido astronómico alternativo (sin log de error)
          this.displayAlternativeAstronomyData(birthdate);
        }
      } catch (error) {
        // Mostrar contenido alternativo en lugar de error (silenciosamente)
        this.displayAlternativeAstronomyData(birthdate);
      }
    }

    private displayAlternativeAstronomyData(birthdate: string): void {
      const nasaDataDiv = document.getElementById('nasa-data');
      if (!nasaDataDiv) return;

      const date = new Date(birthdate);
      const year = date.getFullYear();
      const month = date.getMonth();
      const day = date.getDate();

      // Calcular datos astronómicos interesantes
      const daysAlive = Math.floor((new Date().getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
      const moonPhases = [
        '🌑 Luna Nueva',
        '🌒 Luna Creciente',
        '🌓 Cuarto Creciente',
        '🌔 Luna Gibosa Creciente',
        '🌕 Luna Llena',
        '🌖 Luna Gibosa Menguante',
        '🌗 Cuarto Menguante',
        '🌘 Luna Menguante',
      ];
      const moonPhase = moonPhases[Math.floor((((year + month + day) % 29.53) / 29.53) * 8) % 8];

      // Calcular signo zodiacal
      const zodiacSign = this.getZodiacSign(month, day);

      // Datos del cielo en esa fecha
      const skyData = this.getSkyDataForDate(month, day);

      const html = `
        <div class="border border-terminal-dim p-4 rounded">
          <div class="text-terminal-bright text-xl mb-4">
            █ DATOS ASTRONÓMICOS DE TU NACIMIENTO
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div class="border-l-2 border-terminal-dim pl-3">
              <div class="text-terminal-bright font-semibold text-base">Fase Lunar Aproximada</div>
              <div class="text-lg">${moonPhase}</div>
            </div>

            <div class="border-l-2 border-terminal-dim pl-3">
              <div class="text-terminal-bright font-semibold text-base">Signo Zodiacal</div>
              <div class="text-lg">${zodiacSign}</div>
            </div>

            <div class="border-l-2 border-terminal-dim pl-3">
              <div class="text-terminal-bright font-semibold text-base">Constelación Visible</div>
              <div class="text-lg">${skyData.constellation}</div>
            </div>

            <div class="border-l-2 border-terminal-dim pl-3">
              <div class="text-terminal-bright font-semibold text-base">Estación del Año</div>
              <div class="text-lg">${skyData.season}</div>
            </div>
          </div>

          <div class="mb-4 p-3 bg-black bg-opacity-30 rounded border border-terminal-dim">
            <div class="text-terminal-bright font-semibold mb-2 text-base">🌌 Curiosidad Astronómica</div>
            <div class="text-base">${skyData.fact}</div>
          </div>

          <div class="p-3 bg-black bg-opacity-30 rounded border border-terminal-dim">
            <div class="text-terminal-bright font-semibold mb-2 text-base">✨ Datos Cósmicos</div>
            <div class="text-base space-y-1">
              <div>• Has dado <span class="text-terminal-bright">${(daysAlive / 365.25).toFixed(2)}</span> vueltas al Sol</div>
              <div>• La luz de tu nacimiento ha viajado <span class="text-terminal-bright">${((daysAlive * 299792 * 86400) / 1000000000).toFixed(2)}</span> mil millones de km</div>
              <div>• En tu vida, la Tierra ha recorrido <span class="text-terminal-bright">${(daysAlive * 2.574).toFixed(0)}</span> millones de km en el espacio</div>
            </div>
          </div>

          <div class="mt-3 text-sm text-terminal-dim">
            💡 Datos calculados astronómicamente. Para imágenes reales de NASA, configura una API key en .env
          </div>
        </div>
      `;

      nasaDataDiv.innerHTML = html;
    }

    private getZodiacSign(month: number, day: number): string {
      const signs = [
        { sign: '♑ Capricornio', end: [0, 19] },
        { sign: '♒ Acuario', end: [1, 18] },
        { sign: '♓ Piscis', end: [2, 20] },
        { sign: '♈ Aries', end: [3, 19] },
        { sign: '♉ Tauro', end: [4, 20] },
        { sign: '♊ Géminis', end: [5, 20] },
        { sign: '♋ Cáncer', end: [6, 22] },
        { sign: '♌ Leo', end: [7, 22] },
        { sign: '♍ Virgo', end: [8, 22] },
        { sign: '♎ Libra', end: [9, 22] },
        { sign: '♏ Escorpio', end: [10, 21] },
        { sign: '♐ Sagitario', end: [11, 21] },
      ];

      for (let i = 0; i < signs.length; i++) {
        const [endMonth, endDay] = signs[i].end;
        if (month < endMonth || (month === endMonth && day <= endDay)) {
          return signs[i].sign;
        }
      }
      return signs[0].sign;
    }

    private getSkyDataForDate(
      month: number,
      _day: number
    ): { constellation: string; season: string; fact: string } {
      const skyInfo: { [key: number]: { constellation: string; season: string; fact: string } } = {
        0: {
          constellation: '🌟 Orión',
          season: '❄️ Invierno (Hemisferio Norte)',
          fact: 'Orión es una de las constelaciones más reconocibles del cielo nocturno, visible desde ambos hemisferios.',
        },
        1: {
          constellation: '🌟 Géminis',
          season: '❄️ Invierno (Hemisferio Norte)',
          fact: 'En febrero, la constelación de Géminis alcanza su punto más alto en el cielo nocturno.',
        },
        2: {
          constellation: '🌟 Leo',
          season: '🌸 Primavera (Hemisferio Norte)',
          fact: 'Leo es una de las constelaciones del zodíaco más brillantes, con su estrella principal Regulus.',
        },
        3: {
          constellation: '🌟 Virgo',
          season: '🌸 Primavera (Hemisferio Norte)',
          fact: 'Virgo contiene uno de los cúmulos de galaxias más grandes conocidos: el Cúmulo de Virgo.',
        },
        4: {
          constellation: '🌟 Bootes',
          season: '🌸 Primavera (Hemisferio Norte)',
          fact: 'Bootes contiene a Arturo, la tercera estrella más brillante del cielo nocturno.',
        },
        5: {
          constellation: '🌟 Escorpio',
          season: '☀️ Verano (Hemisferio Norte)',
          fact: 'Escorpio contiene la supergigante roja Antares, una estrella 850 veces más grande que el Sol.',
        },
        6: {
          constellation: '🌟 Sagitario',
          season: '☀️ Verano (Hemisferio Norte)',
          fact: 'Sagitario apunta hacia el centro de nuestra galaxia, la Vía Láctea.',
        },
        7: {
          constellation: '🌟 Cisne',
          season: '☀️ Verano (Hemisferio Norte)',
          fact: 'El Cisne es prominente en verano y forma parte del famoso "Triángulo de Verano".',
        },
        8: {
          constellation: '🌟 Acuario',
          season: '🍂 Otoño (Hemisferio Norte)',
          fact: 'Acuario es una de las constelaciones más antiguas reconocidas, datando de la Mesopotamia.',
        },
        9: {
          constellation: '🌟 Pegaso',
          season: '🍂 Otoño (Hemisferio Norte)',
          fact: 'Pegaso es famoso por el "Cuadrado de Pegaso", un asterismo fácilmente reconocible.',
        },
        10: {
          constellation: '🌟 Andrómeda',
          season: '🍂 Otoño (Hemisferio Norte)',
          fact: 'Andrómeda contiene la galaxia más cercana a la Vía Láctea, visible a simple vista en cielos oscuros.',
        },
        11: {
          constellation: '🌟 Tauro',
          season: '❄️ Invierno (Hemisferio Norte)',
          fact: 'Tauro contiene las Pléyades, un cúmulo estelar de las más jóvenes estrellas cercanas a nosotros.',
        },
      };

      return skyInfo[month] || skyInfo[0];
    }

    private displayNASAData(data: NASAAPODResponse): void {
      const nasaDataDiv = document.getElementById('nasa-data');
      if (!nasaDataDiv) return;

      const html = `
      <div class="border border-terminal-dim p-4 rounded">
        <div class="text-terminal-bright text-lg mb-4">
          █ IMAGEN ASTRONÓMICA DEL DÍA DE TU NACIMIENTO
        </div>

        <div class="mb-3">
          <div class="text-terminal-text font-bold text-lg">${this.escapeHtml(data.title)}</div>
          <div class="text-xs text-terminal-dim">${data.date}</div>
        </div>

        ${
          data.media_type === 'image'
            ? `
          <div class="mb-4">
            <a href="${data.url}" target="_blank" rel="noopener noreferrer">
              <img
                src="${data.url}"
                alt="${this.escapeHtml(data.title)}"
                class="w-full max-w-md mx-auto border border-terminal-dim rounded"
                loading="lazy"
              />
            </a>
          </div>
        `
            : `
          <div class="mb-4 text-terminal-dim">
            <a href="${data.url}" target="_blank" rel="noopener noreferrer" class="text-terminal-text hover:text-terminal-bright underline">
              Ver video/multimedia →
            </a>
          </div>
        `
        }

        <div class="text-sm">
          ${this.escapeHtml(data.explanation)}
        </div>
      </div>
    `;

      nasaDataDiv.innerHTML = html;
    }

    private escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    private showSolarSystem(): void {
      const solarSystemDiv = document.getElementById('solar-system');
      if (solarSystemDiv) {
        solarSystemDiv.classList.remove('hidden');

        // Agregar información del sistema solar
        const infoHtml = `
          <div class="mt-4 grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
            <div class="border border-terminal-dim p-2 rounded">
              <div class="text-terminal-bright font-semibold">☿ Mercurio</div>
              <div class="text-xs text-terminal-dim">88 días/año</div>
            </div>
            <div class="border border-terminal-dim p-2 rounded">
              <div class="text-terminal-bright font-semibold">♀ Venus</div>
              <div class="text-xs text-terminal-dim">225 días/año</div>
            </div>
            <div class="border border-terminal-dim p-2 rounded">
              <div class="text-terminal-bright font-semibold">🌍 Tierra</div>
              <div class="text-xs text-terminal-dim">365 días/año</div>
            </div>
            <div class="border border-terminal-dim p-2 rounded">
              <div class="text-terminal-bright font-semibold">♂ Marte</div>
              <div class="text-xs text-terminal-dim">687 días/año</div>
            </div>
            <div class="border border-terminal-dim p-2 rounded">
              <div class="text-terminal-bright font-semibold">♃ Júpiter</div>
              <div class="text-xs text-terminal-dim">12 años terrestres</div>
            </div>
            <div class="border border-terminal-dim p-2 rounded">
              <div class="text-terminal-bright font-semibold">♄ Saturno</div>
              <div class="text-xs text-terminal-dim">29 años terrestres</div>
            </div>
            <div class="border border-terminal-dim p-2 rounded">
              <div class="text-terminal-bright font-semibold">♅ Urano</div>
              <div class="text-xs text-terminal-dim">84 años terrestres</div>
            </div>
            <div class="border border-terminal-dim p-2 rounded">
              <div class="text-terminal-bright font-semibold">♆ Neptuno</div>
              <div class="text-xs text-terminal-dim">165 años terrestres</div>
            </div>
          </div>
        `;

        const canvasContainer = solarSystemDiv.querySelector('.mb-4');
        if (canvasContainer) {
          canvasContainer.insertAdjacentHTML('afterend', infoHtml);
        }

        setTimeout(() => {
          this.solarSystem.start();
        }, 100);
      }
    }

    private async generateBirthYearNews(birthDate: Date): Promise<void> {
      const year = birthDate.getFullYear();
      const month = birthDate.getMonth() + 1;

      // Generar noticias históricas simuladas basadas en el año y mes
      const historicalNews = this.generateHistoricalTechNews(year, month);
      this.displayBirthYearNews(historicalNews, year, month);
    }

    private generateHistoricalTechNews(year: number, month: number): TechNewsEvent[] {
      const techEvents: { [key: string]: TechNewsEvent[] } = {
        '1990': [
          {
            title: '🌐 Tim Berners-Lee crea la World Wide Web',
            description:
              'El científico británico desarrolla el primer navegador web y servidor, revolucionando la comunicación global.',
            source: 'Tech History',
          },
          {
            title: '💾 Microsoft lanza Windows 3.0',
            description:
              'Nueva versión del sistema operativo que populariza la interfaz gráfica en computadoras personales.',
            source: 'Computing News',
          },
        ],
        '1995': [
          {
            title: '🔍 Nace Yahoo!',
            description:
              'Jerry Yang y David Filo crean uno de los primeros directorios web, marcando el inicio de los motores de búsqueda.',
            source: 'Internet Archive',
          },
          {
            title: '☕ Java es presentado por Sun Microsystems',
            description:
              'Lenguaje de programación que revoluciona el desarrollo de aplicaciones multiplataforma.',
            source: 'Developer News',
          },
        ],
        '2000': [
          {
            title: '🔎 Google se convierte en el buscador más popular',
            description:
              'El motor de búsqueda supera a sus competidores con su algoritmo PageRank.',
            source: 'Search Engine History',
          },
          {
            title: '📱 Se lanza el primer teléfono con cámara',
            description: 'Sharp J-SH04 introduce la fotografía móvil al mercado japonés.',
            source: 'Mobile Tech',
          },
        ],
        '2005': [
          {
            title: '📹 YouTube es fundado',
            description:
              'Plataforma que transformará la forma en que consumimos video en internet.',
            source: 'Media History',
          },
          {
            title: '🗺️ Google Maps revoluciona la navegación',
            description: 'Servicio de mapas interactivos cambia la forma de explorar el mundo.',
            source: 'Geo Tech',
          },
        ],
        '2010': [
          {
            title: '📱 Apple presenta el iPad',
            description: 'Dispositivo que crea la categoría de tablets modernas.',
            source: 'Apple News',
          },
          {
            title: '📸 Instagram es lanzado',
            description:
              'Red social de fotografía que alcanza 100,000 usuarios en su primera semana.',
            source: 'Social Media',
          },
        ],
        '2015': [
          {
            title: '🤖 AlphaGo derrota al campeón de Go',
            description: 'IA de DeepMind marca un hito en inteligencia artificial.',
            source: 'AI Research',
          },
          {
            title: '🚗 Tesla Autopilot es introducido',
            description: 'Sistema de conducción semiautónoma en vehículos de producción.',
            source: 'Auto Tech',
          },
        ],
        '2020': [
          {
            title: '🧬 Vacunas COVID-19 con tecnología mRNA',
            description: 'Desarrollo récord de vacunas usando nueva tecnología genética.',
            source: 'BioTech News',
          },
          {
            title: '🚀 SpaceX lanza misión tripulada',
            description: 'Primera empresa privada en llevar astronautas a la ISS.',
            source: 'Space News',
          },
        ],
      };

      // Buscar eventos del año más cercano
      const yearKey = Object.keys(techEvents)
        .map(y => parseInt(y))
        .sort((a, b) => Math.abs(year - a) - Math.abs(year - b))[0]
        .toString();

      const events = techEvents[yearKey] || [
        {
          title: `🖥️ Avances tecnológicos en ${year}`,
          description: `Durante este año, la tecnología continuó evolucionando con importantes desarrollos en computación y comunicaciones.`,
          source: 'Tech History',
        },
        {
          title: `🌍 Internet en ${year}`,
          description: `La red global continuó expandiéndose, conectando más personas y transformando la sociedad.`,
          source: 'Internet Archive',
        },
      ];

      return events.map(event => ({
        ...event,
        url: '#',
        publishedAt: `${year}-${month.toString().padStart(2, '0')}-15`,
      }));
    }

    private displayBirthYearNews(news: TechNewsEvent[], year: number, month: number): void {
      const resultsDiv = document.getElementById('calculator-results');
      if (!resultsDiv) return;

      const monthNames = [
        'Enero',
        'Febrero',
        'Marzo',
        'Abril',
        'Mayo',
        'Junio',
        'Julio',
        'Agosto',
        'Septiembre',
        'Octubre',
        'Noviembre',
        'Diciembre',
      ];
      const monthName = monthNames[month - 1];

      const newsHtml = `
        <div class="border border-terminal-dim p-4 rounded mt-4">
          <div class="text-terminal-bright text-xl mb-4">
            █ EVENTOS TECNOLÓGICOS EN ${monthName.toUpperCase()} DE ${year}
          </div>
          <div class="space-y-4">
            ${news
              .map(
                (article, index) => `
              <div class="border-l-2 border-terminal-dim pl-4 py-2">
                <div class="text-terminal-bright text-base font-semibold">${index + 1}. ${this.escapeHtml(article.title)}</div>
                <div class="text-base mt-1">${this.escapeHtml(article.description || 'Sin descripción')}</div>
                <div class="text-sm text-terminal-dim mt-2">
                  <span>${article.source}</span>
                </div>
              </div>
            `
              )
              .join('')}
          </div>
        </div>
      `;

      resultsDiv.innerHTML += newsHtml;
    }

    private exit(): void {
      this.solarSystem.stop();
      this.terminal.printOutput('<div class="success-text">Volviendo al menú...</div>');
      setTimeout(() => {
        const event = new CustomEvent('loadView', { detail: { view: 'menu' } });
        document.dispatchEvent(event);

        // Ejecutar comando menu
        const input = document.getElementById('terminal-input') as HTMLInputElement;
        if (input) {
          input.value = 'menu';
          input.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter' }));
        }
      }, 500);
    }
  }

  document.addEventListener('loadView', (e: Event) => {
    const customEvent = e as CustomEvent;
    if (customEvent.detail.view === 'calculator') {
      const terminal = window.terminal;
      const calculatorComponent = document.getElementById('calculator-component');

      if (terminal && calculatorComponent) {
        terminal.printOutput(calculatorComponent.innerHTML);

        // Inicializar calculadora
        setTimeout(() => {
          const calculator = new CosmicCalculator(terminal);
          calculator.init();
        }, 100);
      }
    }
  });
</script>

<style>
  /* Estilos adicionales si es necesario */
</style>
