---
// Componente de integración con Pi Network
---

<div id="pi-component" class="hidden">
  <div class="section-title glitch" data-text="Pi Network Integration">Pi Network Integration</div>

  <div class="mb-6">
    <div id="pi-status" class="mb-4 text-terminal-text">
      Estado: <span class="text-terminal-bright">Conectando a Pi Network...</span>
    </div>

    <div id="pi-auth" class="mb-4">
      <button id="pi-auth-btn" class="menu-item px-4 py-2">Autenticar con Pi Network</button>
    </div>

    <div id="pi-wallet" class="mb-4 hidden">
      <div class="rounded border border-terminal-dim p-4">
        <div class="mb-2 text-terminal-bright">Billetera Pi</div>
        <div class="text-sm">
          <div>Saldo: <span id="pi-balance">0.00</span> π</div>
          <div>Dirección: <span id="pi-address" class="text-terminal-dim">No conectada</span></div>
        </div>
        <button id="pi-mine-btn" class="menu-item mt-2 px-3 py-1 text-xs">Minar Pi</button>
      </div>
    </div>

    <div id="pi-transactions" class="hidden">
      <div class="rounded border border-terminal-dim p-4">
        <div class="mb-2 text-terminal-bright">Transacciones Recientes</div>
        <div id="pi-tx-list" class="space-y-1 text-sm">
          <!-- Transacciones se mostrarán aquí -->
        </div>
      </div>
    </div>
  </div>

  <div class="mt-4 text-sm text-terminal-dim">Escribe 'menu' para volver al menú principal.</div>
</div>

<script>
  interface PiUser {
    uid: string;
    username: string;
    roles: string[];
    accessToken: string;
  }

  interface PiTransaction {
    id: string;
    amount: number;
    type: 'mined' | 'sent' | 'received';
    timestamp: Date;
  }

  class PiNetworkIntegration {
    private piApiKey: string;
    private user: PiUser | null = null;
    private balance: number = 0;
    private transactions: PiTransaction[] = [];

    constructor() {
      this.piApiKey = import.meta.env.PUBLIC_PI_API_KEY || '';
      this.loadPiData();
    }

    private loadPiData(): void {
      const savedUser = localStorage.getItem('pi-user');
      const savedBalance = localStorage.getItem('pi-balance');
      const savedTransactions = localStorage.getItem('pi-transactions');

      if (savedUser) {
        this.user = JSON.parse(savedUser);
      }
      if (savedBalance) {
        this.balance = parseFloat(savedBalance);
      }
      if (savedTransactions) {
        this.transactions = JSON.parse(savedTransactions).map((tx: any) => ({
          ...tx,
          timestamp: new Date(tx.timestamp),
        }));
      }
    }

    private savePiData(): void {
      if (this.user) {
        localStorage.setItem('pi-user', JSON.stringify(this.user));
      }
      localStorage.setItem('pi-balance', this.balance.toString());
      localStorage.setItem('pi-transactions', JSON.stringify(this.transactions));
    }

    async authenticate(): Promise<void> {
      const statusEl = document.getElementById('pi-status');
      if (!statusEl) return;

      try {
        // Simulación de autenticación con Pi Network
        statusEl.innerHTML = 'Estado: <span class="text-terminal-bright">Autenticando...</span>';

        // Simular llamada a API de Pi Network
        const response = await this.mockPiAuth();

        this.user = response.user;
        this.balance = response.balance;

        this.updateUI();
        this.savePiData();

        statusEl.innerHTML = 'Estado: <span class="text-green-400">Conectado</span>';
      } catch (error) {
        console.error('Error authenticating with Pi Network:', error);
        statusEl.innerHTML = 'Estado: <span class="error-text">Error de autenticación</span>';
      }
    }

    private async mockPiAuth(): Promise<{ user: PiUser; balance: number }> {
      // Simulación de respuesta de API
      return new Promise(resolve => {
        setTimeout(() => {
          resolve({
            user: {
              uid: 'pi_' + Math.random().toString(36).substr(2, 9),
              username: 'pi_user_' + Math.random().toString(36).substr(2, 5),
              roles: ['user'],
              accessToken: 'mock_token_' + this.piApiKey.substring(0, 10),
            },
            balance: Math.random() * 100 + 10,
          });
        }, 1500);
      });
    }

    minePi(): void {
      if (!this.user) return;

      const minedAmount = Math.random() * 0.1 + 0.05;
      this.balance += minedAmount;

      const transaction: PiTransaction = {
        id: 'tx_' + Date.now(),
        amount: minedAmount,
        type: 'mined',
        timestamp: new Date(),
      };

      this.transactions.unshift(transaction);
      if (this.transactions.length > 10) {
        this.transactions = this.transactions.slice(0, 10);
      }

      this.updateUI();
      this.savePiData();

      // Mostrar notificación de minería
      this.showMiningNotification(minedAmount);
    }

    private showMiningNotification(amount: number): void {
      const notification = document.createElement('div');
      notification.className =
        'fixed top-4 right-4 bg-terminal-bg border border-terminal-bright p-3 rounded z-50';
      notification.innerHTML = `
        <div class="text-terminal-bright">¡Pi Minado!</div>
        <div class="text-sm">+${amount.toFixed(4)} π</div>
      `;

      document.body.appendChild(notification);

      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    private updateUI(): void {
      const authDiv = document.getElementById('pi-auth');
      const walletDiv = document.getElementById('pi-wallet');
      const txDiv = document.getElementById('pi-transactions');
      const balanceEl = document.getElementById('pi-balance');
      const addressEl = document.getElementById('pi-address');
      const txListEl = document.getElementById('pi-tx-list');

      if (this.user) {
        if (authDiv) authDiv.classList.add('hidden');
        if (walletDiv) walletDiv.classList.remove('hidden');
        if (txDiv) txDiv.classList.remove('hidden');

        if (balanceEl) balanceEl.textContent = this.balance.toFixed(4);
        if (addressEl) addressEl.textContent = this.user.username;

        if (txListEl) {
          txListEl.innerHTML = this.transactions
            .map(
              tx => `
            <div class="text-xs">
              <span class="${tx.type === 'mined' ? 'text-green-400' : 'text-terminal-text'}">
                ${tx.type === 'mined' ? '+' : ''}${tx.amount.toFixed(4)} π
              </span>
              <span class="text-terminal-dim ml-2">${tx.timestamp.toLocaleTimeString()}</span>
            </div>
          `
            )
            .join('');
        }
      }
    }
  }

  // Inicializar Pi Network
  const piNetwork = new PiNetworkIntegration();

  document.addEventListener('loadView', (e: Event) => {
    const customEvent = e as CustomEvent;
    if (customEvent.detail.view === 'pi') {
      const terminal = window.terminal;
      const piComponent = document.getElementById('pi-component');

      if (terminal && piComponent) {
        terminal.printOutput(piComponent.innerHTML);
        piNetwork.updateUI();

        // Agregar event listeners
        setTimeout(() => {
          const authBtn = document.getElementById('pi-auth-btn');
          const mineBtn = document.getElementById('pi-mine-btn');

          if (authBtn) {
            authBtn.addEventListener('click', () => piNetwork.authenticate());
          }
          if (mineBtn) {
            mineBtn.addEventListener('click', () => piNetwork.minePi());
          }
        }, 100);
      }
    }
  });
</script>

<style>
  /* Estilos adicionales para Pi Network */
</style>
